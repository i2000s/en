<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A Notebook of Xiaodong Qi&#39;s</title>
    <description>Exploring the Quantum World</description>
    <link>https://www.qixiaodong.tk/en</link>
    <atom:link href="https://www.qixiaodong.tk/en/atom.xml" rel="self" type="application/rss+xml" />

   
        <item>
          <title>My SQuInT 2018 poster presentation</title>
          <description>&lt;p&gt;My poster submission to the &lt;a href=&quot;http://squint.unm.edu/events/2018.html&quot;&gt;20th Annual SQuInT Workshop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Day, Date&lt;/em&gt;&lt;/strong&gt;: February 22, 2018&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Time, Session&lt;/em&gt;&lt;/strong&gt;: Session 5 at 5:00pm-7:00pm&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Title&lt;/em&gt;&lt;/strong&gt;: Enhanced cooperativity of quantum measurement for spin squeezing of atoms coupled to a nanophotonic waveguide&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Authors&lt;/em&gt;&lt;/strong&gt;: Xiaodong Qi, Yuan-Yu Jau, Jongmin Lee, and Ivan H. Deutsch&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Abstract&lt;/em&gt;&lt;/strong&gt;: We study the enhancement of cooperativity in the atom-light interface near a nanophotonic waveguide for application to quantum nondemolition (QND) measurement of atomic spins. Here the cooperativity per atom is determined by the ratio between the measurement strength and the decoherence rate. Counterintuitively, we find that by placing the atoms at an azimuthal position where the guided probe mode has the lowest intensity, we increase the cooperativity. This arises because the QND measurement strength depends on the interference between the probe and scattered light guided into an orthogonal polarization mode, while the decoherence rate depends on the local intensity of the probe. Thus, by proper choice of geometry, the ratio of good to bad scattering can be strongly enhanced for highly anisotropic modes. We apply this to study spin squeezing resulting from QND measurement of spin projection noise via the Faraday effect in two nanophotonic geometries, a cylindrical nanofiber and a square waveguide. By using a two-color scheme to cancel the tensor light shift, we find, with about 2500 atoms using realistic experimental parameters, $ \sim 6 $ dB and $ \sim 13 $ dB of squeezing can be achieved on the nanofiber and square waveguide, respectively.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Files can be downloaded from the &lt;a href=&quot;https://github.com/i2000s/2018SQuInT-EnhancedCooperativityForSpinSqueezing/releases&quot;&gt;repo&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Feel free to comment as an &lt;a href=&quot;https://github.com/i2000s/2018SQuInT-EnhancedCooperativityForSpinSqueezing/issues&quot;&gt;issue&lt;/a&gt; for the project in general.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reference: &lt;a href=&quot;https://arxiv.org/abs/1712.02916&quot;&gt;arXiv:1712.02916&lt;/a&gt; (comments are welcome). Related news report for general public can be found &lt;a href=&quot;https://cquic.unm.edu/news-deutsch-group/nanophotonic-waveguides-enhance-atom-light-coupling-with-a-weak-local-field/&quot;&gt;on CQuIC website&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Previous related work: &lt;a href=&quot;http://journals.aps.org/pra/abstract/10.1103/PhysRevA.93.023817&quot;&gt;X. Qi, B. Q. Baragiola, P. S. Jessen, I. H. Deutsch, Phys. Rev. A 93, 023817(2016)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cite this poster: &lt;a href=&quot;https://zenodo.org/badge/latestdoi/111471228&quot;&gt;&lt;img src=&quot;https://zenodo.org/badge/111471228.svg&quot; alt=&quot;DOI&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;references&quot;&gt;

&lt;/div&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2017/11/20/squint-2018-poster.html</link>
          <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2017/11/20/squint-2018-poster.html</guid>
        </item>
   
        <item>
          <title>My DAMOP 2017 talk</title>
          <description>&lt;p&gt;My submission has been accepted to be presented as a talk at the &lt;a href=&quot;http://www.aps.org/meetings/meeting.cfm?name=DAMOP17&quot;&gt;APS 48th Annual Meeting of Atomic, Molecular and Optical Physics&lt;/a&gt; and is currently on the program schedule.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Day, Date&lt;/em&gt;&lt;/strong&gt;: Friday, June 9th, 2017&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Time, Session&lt;/em&gt;&lt;/strong&gt;: 9:24 AM–9:36 AM, &lt;a href=&quot;http://meetings.aps.org/Meeting/DAMOP17/Session/T7&quot;&gt;Session T7: Quantum Measurement&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Title&lt;/em&gt;&lt;/strong&gt;: &lt;a href=&quot;http://meetings.aps.org/Meeting/DAMOP17/Session/T7.8&quot;&gt;Generation of atomic spin squeezed states in nanophotonic waveguides using QND measurement&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Authors&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Xiaodong Qi (University of New Mexico)&lt;/li&gt;
&lt;li&gt;David Melchior (University of Arizona)&lt;/li&gt;
&lt;li&gt;Poul S. Jessen (University of Arizona)&lt;/li&gt;
&lt;li&gt;Jongmin Lee (Sandia National Labs)&lt;/li&gt;
&lt;li&gt;Yuan-Yu Jau (Sandia National Labs)&lt;/li&gt;
&lt;li&gt;Ivan H. Deutsch (University of New Mexico)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Abstract&lt;/em&gt;&lt;/strong&gt;: Nanophotonic waveguides strongly enhance the entangling strength of the atom-light interface. We study their application to the generation of spin squeezed states of trapped ultracold cesium atoms in two geometries — cylindrical optical nanofibers and square waveguides. We consider two different protocols — squeezing the clock transition by the birefringence coupling and squeezing a spin coherent state via the Faraday interaction. We unify our analysis based on a universal parameter — the optical depth per atom. In calculating the spin squeezing parameter, we have established a set of stochastic master equations to describe the individual and collective spin dynamics. Our simulation shows that $ \sim 10$ dB of spin squeezing may be achievable with a few thousands of atoms on these nanophotonic waveguides. Our result can be generalized to other nanophotonic platforms, for implementing non-Gaussian states, and to improve quantum sensing precision using spin squeezing techniques.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Presentation Slides and Audio Records&lt;/em&gt;&lt;/strong&gt;: can be downloaded from &lt;a href=&quot;https://github.com/i2000s/2017DAMOP-spin-squeezing-on-nanophotonic-waveguides/releases&quot;&gt;this link&lt;/a&gt; under the &lt;a href=&quot;https://creativecommons.org/licenses/by/4.0/&quot;&gt;CC-BY-4.0 license&lt;/a&gt;. Cite with the &lt;a href=&quot;https://zenodo.org/badge/latestdoi/93832855&quot;&gt;&lt;img src=&quot;https://zenodo.org/badge/93832855.svg&quot; alt=&quot;DOI&quot; /&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;center&gt;
&lt;div class=&quot;row&quot;&gt;&lt;figure&gt;
&lt;img src=&quot;/en/assets/img/qrcode_DAMOP_talk_page.png&quot;   height=&quot;210px&quot; align=&quot;center&quot; alt=&quot;Scan to load on your mobile device&quot;   /&gt;
&lt;figcaption&gt;
QR code for this page.
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;/center&gt;


&lt;div class=&quot;references&quot;&gt;

&lt;/div&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2017/06/04/damop-2017-talk.html</link>
          <pubDate>Sun, 04 Jun 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2017/06/04/damop-2017-talk.html</guid>
        </item>
   
        <item>
          <title>Miscellaneous topics not covered in the CQuIC summer workshop</title>
          <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;This post is a part of the &lt;a href=&quot;https://cquic.github.io/summer17-computing-workshop/&quot;&gt;2017 CQuIC computing summer workshop tutorial materials&lt;/a&gt; with audio records available.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When designing the CQuIC summer 2017 IT workshop, we as the organizers have the following in mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only teach some basic scientific computing skills that we think are crucial for students to be ready for doing research projects using current IT techniques.&lt;/li&gt;
&lt;li&gt;Instructors will only teach what they are familiar and comfortable with, and we focus on using one programming language for numerical and algebra calculations.&lt;/li&gt;
&lt;li&gt;Let students work on their own, and instructors should never touch students’ keyboards.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously, we are also missing some maybe important points given the situation above. Please comment below so that I can on behalf of other instructors to collect and answer your questions.&lt;/p&gt;
&lt;h2 id=&quot;practical-suggestions-on-using-matlab&quot;&gt;Practical suggestions on using Matlab:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;About visualization: The default color map in recent Matlab versions are pretty good already, but the common mistakes in making plots with Matlab is mostly on fontsize and curve thickness and so on. Therefore, it might be good to learn to use the following functions and parameters:&lt;/li&gt;
&lt;li&gt;put &lt;code&gt;&#39;linewidth&#39;,2&lt;/code&gt; or similar definition when you call the &lt;code&gt;plot&lt;/code&gt; functions.&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;set(gca,&#39;fontsize&#39;,16)&lt;/code&gt; or similar to uniformally define the fontsize of your axis label and titles.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;learn to use tools like &lt;a href=&quot;https://github.com/matlab2tikz/matlab2tikz&quot;&gt;matlab2tikz&lt;/a&gt; to export figures into LaTeX supported TikZ code and the like. This makes it easy to unify fonts in the plots and the main text ready for publications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;About parallel computing: The default &lt;code&gt;parfor&lt;/code&gt; function is pretty good on handling up-to-12-core parallel computing jobs. If you encounter “lose of connection to workers” error, you may want to set &lt;code&gt;&#39;SpmdEnabled&#39;&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; when you define the parpool.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;other-tips-on-using-jupyter-notebook&quot;&gt;Other tips on using Jupyter notebook&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;You can use other languages in Jupyter notebook–beside Python and include Matlab. As a fact, the word &lt;strong&gt;&lt;em&gt;Jupyter&lt;/em&gt;&lt;/strong&gt; comes from modern programming languages including &lt;a href=&quot;https://julialang.org&quot;&gt;Julia&lt;/a&gt;, Python and &lt;a href=&quot;https://www.r-project.org&quot;&gt;R&lt;/a&gt;. You can define the kernel by selecting the kernel you need under the &lt;code&gt;kernel&lt;/code&gt; menu after installing the necessary kernel packages. The full list of community-supported kernel can be found &lt;a href=&quot;https://github.com/jupyter/jupyter/wiki/Jupyter-kernels&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It is possible to run different languages in one notebook. The easiest way is to execute bash commands to call other language-based commands inside of the notebook. But different kernel define different syntax to do so. One example of running variant languages on a Julia kernel can be found &lt;a href=&quot;https://github.com/i2000s/simnanophotonics/blob/master/sqwg.ipynb&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;on-choosing-your-daily-programming-languages&quot;&gt;On choosing your daily programming languages&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If you don’t mind the commercial nature, Matlab is actually pretty on numerical calculations and better than Python in common scenarios. Python only get some advantage when you want to use a lot of cores to do parallel computing. A good benchmark on those common modern programming languages can be found on the &lt;a href=&quot;https://julialang.org/&quot;&gt;Julia website&lt;/a&gt; and plotted &lt;a href=&quot;https://julialang.org/benchmarks/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Another note on Matlab is that it also has a powerful &lt;a href=&quot;https://www.mathworks.com/help/symbolic/index.html&quot;&gt;Symbolic Math Toolbox&lt;/a&gt; and two versions of interactive notebook interfaces–one is the old fashion &lt;a href=&quot;https://www.mathworks.com/help/symbolic/notebook-interface.html&quot;&gt;notebook based on MuPAD&lt;/a&gt; and the other one is called &lt;a href=&quot;https://www.mathworks.com/products/matlab/live-editor.html&quot;&gt;Live Editor&lt;/a&gt;. Both are similar to Jupyter notebook and Mathematica.&lt;/li&gt;
&lt;li&gt;If you collaborate with other people, it would be the best to use the common language that you and your collaborators are all familiar with.&lt;/li&gt;
&lt;li&gt;Once you’ve mastered one programming language, try something new and use languages for what they are good for.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;things-might-be-touched-in-doing-the-followup-projects&quot;&gt;Things might be touched in doing the followup projects&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Unit tests and other test techniques in various languages.
&lt;ul&gt;
&lt;li&gt;For Matlab users, there are three types of Unit Test styles–one is &lt;a href=&quot;https://www.mathworks.com/help/matlab/script-based-unit-tests.html&quot;&gt;script-based unit tests&lt;/a&gt;, one is &lt;a href=&quot;https://www.mathworks.com/help/matlab/function-based-unit-tests.html&quot;&gt;function-based unit tests&lt;/a&gt;, and the other one is &lt;a href=&quot;https://www.mathworks.com/help/matlab/class-based-unit-tests.html&quot;&gt;class-based unit tests&lt;/a&gt; under the &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab-unit-test-framework.html&quot;&gt;testing framework of Matlab&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For Python users, there is also an &lt;a href=&quot;https://docs.python.org/3/library/unittest.html&quot;&gt;Unit Test Framework for Python 3&lt;/a&gt; and an &lt;a href=&quot;https://docs.python.org/2/library/unittest.html&quot;&gt;Unit Test Framework for Python 2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For Julia users, linked is the doc for &lt;a href=&quot;https://docs.julialang.org/en/latest/stdlib/test.html&quot;&gt;Unit Testing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;More details on documenting when programming in your preferred languages.
&lt;ul&gt;
&lt;li&gt;For Matlab users, you can write &lt;a href=&quot;http://www.mathworks.com/help/matlab/matlab_prog/add-help-for-your-program.html&quot;&gt;help documentations&lt;/a&gt; in the code and &lt;a href=&quot;http://www.mathworks.com/help/matlab/matlab_prog/display-custom-documentation.html&quot;&gt;display your documentations&lt;/a&gt; as an interactive Live Script or HTML page.&lt;/li&gt;
&lt;li&gt;For Python users, &lt;a href=&quot;https://docs.python.org/devguide/documenting.html&quot;&gt;documenting&lt;/a&gt; can be done using &lt;a href=&quot;http://www.sphinx-doc.org/en/stable/&quot;&gt;Sphinx&lt;/a&gt; and exporting to LaTeX, HTML, PDF and other formats or hosting on &lt;a href=&quot;http://readthedocs.org/&quot;&gt;readthedocs.org&lt;/a&gt; website.&lt;/li&gt;
&lt;li&gt;For Julia users, you can find the &lt;a href=&quot;https://docs.julialang.org/en/stable/manual/documentation/&quot;&gt;documentation&lt;/a&gt; guidelines and the &lt;a href=&quot;http://bastikr.github.io/sphinx-julia/&quot;&gt;Julia-Sphinx&lt;/a&gt; and &lt;a href=&quot;https://github.com/JuliaLang/JuliaDoc&quot;&gt;JuliaDoc&lt;/a&gt; extensions for various styles of documenting and uploading docs to &lt;a href=&quot;http://readthedocs.org&quot;&gt;readthedocs.org&lt;/a&gt;. One example of programming in Julia can be found &lt;a href=&quot;http://www.stochasticlifestyle.com/finalizing-julia-package-documentation-testing-coverage-publishing/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Continuous integration (like &lt;a href=&quot;https://travis-ci.org&quot;&gt;travis-CI&lt;/a&gt;) and virtualizations to automate some testing and migrating tasks.&lt;/li&gt;
&lt;li&gt;Permanent storage and generating DOIs for your code and data.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;references&quot;&gt;

&lt;/div&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2017/06/01/miscellaneous-topics-not-covered-in-cquic-it-workshop.html</link>
          <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2017/06/01/miscellaneous-topics-not-covered-in-cquic-it-workshop.html</guid>
        </item>
   
        <item>
          <title>Using Git to collaborate with people who don&#39;t use git</title>
          <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;This post is a part of the &lt;a href=&quot;https://cquic.github.io/summer17-computing-workshop/&quot;&gt;2017 CQuIC computing summer workshop tutorial materials&lt;/a&gt; with audio records available there. Please download the &lt;a href=&quot;https://github.com/CQuIC/summer17-computing-workshop/releases/download/s3/session-3.zip&quot;&gt;lesson material&lt;/a&gt; in order to run the examples used in this lesson.&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;The example may only work if you have write access to the CQuIC@GitHub’s &lt;a href=&quot;https://github.com/CQuIC/NanofiberPaper2014&quot;&gt;NanofiberPaper2014&lt;/a&gt; repo (ask me to grant you the permission).&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One common issue of collaborating with people who don’t use Git is that you have to commit on behalf of your collaborators if you decide to use Git for the Git-benefits–like to minimize the info you want to review for each update and to see how your writing gets improved by professors line by line. Although there are tools for people to collaboratively write papers online, some collaborators in my case don’t want to use them. Without Git and those collaboration tools, things can become very complicated in paper writing (see figure below, for example).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/en/assets/img/phd101212s.png&quot; alt=&quot;Fig 1. An XKCD comedy of a paper writing scenario with a professor who doesn’t use Git.&quot; /&gt; &lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;This tutorial will provide an example of a real paper-writing scenario in handling this mess easily using automation tools that have been covered in the workshop. You will also learn some ideas of using &lt;a href=&quot;https://git-scm.com/docs/git-submodule&quot;&gt;git-submodule&lt;/a&gt; to handle the bibliography databases and share them among your group members for easier references management.&lt;/p&gt;
&lt;h1 id=&quot;a-paper-writing-example-using-automation-tools&quot;&gt;A paper-writing example using automation tools&lt;/h1&gt;
&lt;p&gt;In this section, we will navigate into the example folder, &lt;code&gt;NanofiberPaper2014&lt;/code&gt; which has been tracked by Git. The main folder contains LaTeX and bash script files in the root and on the &lt;code&gt;master&lt;/code&gt; branch, and then two sub-folders called &lt;code&gt;Ben&lt;/code&gt; and &lt;code&gt;Ivan&lt;/code&gt; for collaborators to update their branches in the same names as the these sub-folders, as well as a sub-folder called &lt;code&gt;twocolumn&lt;/code&gt; which is swtiched to the &lt;code&gt;twocolumn&lt;/code&gt; branch to contain files in the completely publication-ready two-column formation. In contrast, the &lt;code&gt;master&lt;/code&gt; branch is the easy-read single-column version of the paper draft where equations can take longer space in the entire row and lines and take more vertical space than the &lt;code&gt;twocolumn&lt;/code&gt; one. All the files, in the process of paper writing, were shared and synchronized using Dropbox. The folders of &lt;code&gt;Ben&lt;/code&gt;, &lt;code&gt;Ivan&lt;/code&gt; and &lt;code&gt;twocolumn&lt;/code&gt; are ignored and untracked by git via the &lt;code&gt;.gitignore&lt;/code&gt; file in order to make the workflow work.&lt;/p&gt;
&lt;p&gt;The git workflow is that every collaborator is writing their updates to their individual folders under their names (&lt;code&gt;Ben&lt;/code&gt; and &lt;code&gt;Ivan&lt;/code&gt;). Since I know how to use Git, I don’t need to put my branch in the Dropbox. Instead, I will synchronize my writing to the GitHub remote repository and then merge my and everyone’s changes to the &lt;code&gt;master&lt;/code&gt; branch and eventually the &lt;code&gt;twocolumn&lt;/code&gt; branch when it is necessary (like at the end of each working days). Whenever there is a change from my collaborator, I will manually review the changes line by line, equation by equation before merging them. In the mean time, I also synchronize every collaborator’s folder and compile the LaTeX files to PDF with the final merged version of the &lt;code&gt;master&lt;/code&gt; branch for the collaborators to preview the progress. The &lt;code&gt;twocolum&lt;/code&gt; branch and corresponding folder only takes incoming merges without merging backwards to other folders. Equations and figure sizes are reformatted periodically to make them well fit into the two-column and single-space preprint version for the final journal submission in the &lt;code&gt;twocolumn&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;What I did to automate this Git merging process is to write three scripts–&lt;code&gt;Makefile&lt;/code&gt;, &lt;code&gt;SyncToMaster.sh&lt;/code&gt; and &lt;code&gt;SyncFromMaster.sh&lt;/code&gt;. Let’s look into them and fill out the missing information in those scripts to recover how I make it work.&lt;/p&gt;
&lt;p&gt;First, open the &lt;code&gt;Makefile&lt;/code&gt; script in your favorite text editor. The script is to compile the LaTeX file into PDF and clean up intermediate files. Obviously, the file name of the LaTeX file to be compiled is missing, and hence you need to change &lt;code&gt;PROJECT=&lt;/code&gt; to &lt;code&gt;PROJECT=Nanofiber&lt;/code&gt; as the LaTeX file’s name is &lt;code&gt;Nanofiber.tex&lt;/code&gt;. You can test it by running&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make &amp;amp;&amp;amp; make clean&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in your terminal to see if the PDF can be compiled in the root directory of the git local repo.&lt;/p&gt;
&lt;p&gt;Second, open the &lt;code&gt;SyncToMaster.sh&lt;/code&gt; file in your text editor. This script is used to merge changes from the collaborators’ folders/branches to the master branch. If any collaborator’s folder–including the master folder–has uncommitted changes, it will stop and remind you to check what has been changed. You can then use &lt;code&gt;git diff&lt;/code&gt; command to see how things were changed compared to the last update. If all changes have been committed, it will then merge the collaborator’s updates or no-updates to the root directory or the master branch and then push the master branch to the remote repo. As you may have observed, the script misses the content in the &lt;code&gt;distributedBranch=&lt;/code&gt; parameter at the beginning. You will need to fill the individual folder’s names where updates are going to be merged to the master branch. They should include &lt;code&gt;Ben&lt;/code&gt; and &lt;code&gt;Ivan&lt;/code&gt;, so you replace the line with &lt;code&gt;distributedBranch=&amp;quot;Ben Ivan&amp;quot;&lt;/code&gt;. Since the &lt;code&gt;twocolumn&lt;/code&gt; branch is not going to be merged to the master branch, and my own branch is not in the Dropbox, we don’t need to include them into the &lt;code&gt;distributedBranch&lt;/code&gt; parameter. You can test how it works by running&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash SyncToMaster.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It may ask you to input your GitHub username and password for this case.&lt;/p&gt;
&lt;p&gt;Third, open the &lt;code&gt;SyncFromMaster.sh&lt;/code&gt; file in your text editor. This script is used to synchronize the collaborators’ folders/branches by merging changes from the master branch. Again, the the &lt;code&gt;distributedBranch&lt;/code&gt; parameter is missing value. But this time, we will need to use &lt;code&gt;Ben Ivan twocolumn&lt;/code&gt; for its value, as now the changes will be merged to the &lt;code&gt;twocolumn&lt;/code&gt; branch eventually. The script will push the individual branches to the remote repo after merging updates and will stop if there are uncommitted changes anywhere. You can run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash SyncFromMaster.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to see how it works. For this case, I have leave all collaborator’s branches one commit behind the &lt;code&gt;master&lt;/code&gt; branch, and you will see how the automatic merges happen when you run the script. It may stop as there are uncommitted changes in sub-folders, where you need to manually review and commit the changes.&lt;/p&gt;
&lt;h1 id=&quot;using-submodules-to-call-the-shared-bibtex-database-file&quot;&gt;Using submodules to call the shared BiBTeX database file&lt;/h1&gt;
&lt;p&gt;When I need to cite papers from the bibliography file, I use the bibliography repo, &lt;a href=&quot;https://github.com/i2000s/Archive&quot;&gt;Archive&lt;/a&gt;, as a submodule of the paper writing project. By calling a submodule for a common BiBTeX file in writing papers, the team can always share the same BibTex keys and reference database in writing paper over time, which will usually save every group member’s time in the end. The basic commands of submodule in Git can be found in the &lt;a href=&quot;https://git-scm.com/docs/git-submodule&quot;&gt;official document&lt;/a&gt; and the &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Submodules&quot;&gt;Pro Git book&lt;/a&gt;, or follow &lt;a href=&quot;https://github.com/blog/2104-working-with-submodules&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;http://komodoide.com/blog/2014-05/git-submodules/&quot;&gt;this&lt;/a&gt; introductions to initialize the bibliography submodule to the master project. For short, I will briefly summarize a few useful commands that work for my workflow. The scripts to automate some of the processes to be discussed below can be found in &lt;a href=&quot;https://github.com/i2000s/scripts/tree/master/Git&quot;&gt;my script repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I define a &lt;code&gt;NanofiberPaper&lt;/code&gt; branch in the &lt;code&gt;Archive&lt;/code&gt; repo and only use this dedicated branch for my nanofiber paper writing. Changes made during the paper writing can be easily merged into the master branch of the bibliography repo and won’t mess up the rest of the branches in case of conflicts. To include the branch of bibliography into the paper repo, I navigate into the paper repo on my local computer in the bash window, and use the following in Git V2.10.0 (older versions could need extra commands in initializing the submodule)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git submodule add -b NanofiberPaper https://i2000s@github.com/i2000s/Archive.git ./refs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a &lt;code&gt;.gitsubmodule&lt;/code&gt; hidden file in the master repo to tell git that a submodule from the &lt;code&gt;NanofiberPaper&lt;/code&gt; branch (from the &lt;code&gt;-b&lt;/code&gt; parameter) of the &lt;code&gt;Archive&lt;/code&gt; repo will be cloned into the subfolder called &lt;code&gt;refs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After this step, I will see there is a change in the paper repo due to the adding of new submodule. So, I need to commit the changes in the paper repo and push it to the remote (suppose I am in the master branch of the paper repo):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit -am &amp;quot;Add a bibliography file as a submodule.&amp;quot;
git push origin master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, I will need to synchronize every branch of the paper repo to include the new submodule with the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git fetch origin
git merge origin/master
git submodule --init --recursive --remote&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that I use the switch &lt;code&gt;--remote&lt;/code&gt; just to make sure I always use the latest hash point of the bibliography repo on the &lt;code&gt;NanofiberPaper&lt;/code&gt; branch. Without this switch, the submodule will always use the hash point recorded in the &lt;code&gt;.gitsubmodule&lt;/code&gt; config file. The &lt;code&gt;--recursive&lt;/code&gt; switch applies operations on all children submodules recursively if there are more than one layer of submodules. This switch can be applied to other &lt;code&gt;git submodule&lt;/code&gt; commands as well, and the depth of submodules can be controlled using the &lt;code&gt;--depth&lt;/code&gt; parameter.&lt;/p&gt;
&lt;p&gt;After all of these initialization settings, one can use bash scripts to automate daily updates and synchronize changes to the remote repo. The submodule is now used as a subfolder as well as an independent Git repo in the paper repo, and all changes from the submodule can be pushed to the &lt;code&gt;Archive&lt;/code&gt; repo and should also be recorded in the paper repo for new changes in the submodule as well. The command to fetch and merge submodule changes from the remote is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git submodule update --remote --merge&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, one can replace &lt;code&gt;--merge&lt;/code&gt; with &lt;code&gt;--rebase&lt;/code&gt; for rebasing local changes on top of fetched commits. The command to publish local submodule changes and tell the paper repository that the submodule should be pointing at a new hash point is the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push --recurse-submodules=on-demand&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command will try to merge changes to the upstream repo of the submodule. If there is any conflicts, it will stop for manual fixes. Without the trial of merge due to changes, one can replace the parameter of &lt;code&gt;push&lt;/code&gt; to &lt;code&gt;--recurse-submodule=check&lt;/code&gt;. Once git finds a change, it will stop and tell users to check changes manually. To manually solve a conflict in the submodule or to merge a submodule change, one has to go into the submodule folder to fix the problem or do the merge as for a separated repo, and then in the main repo, add and commit the changes from the submodule folder. The &lt;code&gt;push&lt;/code&gt; command in the main repo will synchronize the &lt;code&gt;.gitsubmodule&lt;/code&gt; file to the remote repo which has the hash point of the submodule for which the main repo is used. If a &lt;code&gt;push&lt;/code&gt; command is only committed in the submodule folder, it only synchronize the changes in the submodule repo without affecting the main repo on its top–not even to record this submodule change to the main repo’s remote. However, the &lt;code&gt;push --recurse-submodules=[check|on-demand]&lt;/code&gt; command applied in the main repo will try update the &lt;code&gt;.gitsubmodule&lt;/code&gt; file with the new hash point in accordance with the new changes in the submodule and then push the main repo to its remote afterwards.&lt;/p&gt;
&lt;p&gt;There are other tricks for managing submodules in Git. For example, one can use &lt;code&gt;--job &amp;lt;n&amp;gt;&lt;/code&gt; switch for the &lt;code&gt;git submodule&lt;/code&gt; command to do operations for multiple submodules in a repo in parallel. This feature was available since Git V2.9. One can also use &lt;code&gt;foreach [--recursive] &amp;lt;command&amp;gt;&lt;/code&gt; controller for the &lt;code&gt;git submodule&lt;/code&gt; command to recursively apply a repeated command to all submodules in a main repo. More &lt;code&gt;submodule&lt;/code&gt; options can be found in the latest &lt;a href=&quot;https://git-scm.com/docs/git-submodule&quot;&gt;official git document&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;problems-with-different-versions-of-jabref&quot;&gt;Problems with different versions of JabRef&lt;/h1&gt;
&lt;p&gt;Even though I use a dedicated Git repository to centralize all of my bibliography entries (here, it is called &lt;code&gt;Archive&lt;/code&gt; and only contains a single bibtex file), it might be corrupted if people use different versions of BiBTeX editors to view the BibTex file and commit the changes. For this reason, I recommend everyone to use &lt;a href=&quot;https://jabref.org&quot;&gt;JabRef&lt;/a&gt; at the same version (v3.x and v4.x should have the same effect) to edit and view the BiBTeX file. In the mean time, following a few recommendations may help in decreasing the number of troubles if different versions of JabRef have to be used among collaborator. See &lt;a href=&quot;http://help.jabref.org/en/SharedBibFile&quot;&gt;these database setting for JabRef&lt;/a&gt;, for example. Alternatively, there are some tools as illustrated on &lt;a href=&quot;http://unix.stackexchange.com/questions/31266/how-to-sort-by-whatever-key-bibtex-entries-in-bib-file&quot;&gt;Stackexchange&lt;/a&gt; to sort out bibtex entries if other bibliography management software like Mendeley is used.&lt;/p&gt;
&lt;h1 id=&quot;a-small-trick-cleaning-up-loose-objects-in-git-repositories&quot;&gt;A small trick: Cleaning up loose objects in Git repositories&lt;/h1&gt;
&lt;p&gt;Sometimes, Git may remind you that you have too many loose objects in your repo as the number of commits increases. To compress those objects, you can run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git gc --aggressive&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More details can be found from the &lt;a href=&quot;https://git-scm.com/docs/git-gc&quot;&gt;git docs&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;references&quot;&gt;

&lt;/div&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2017/05/24/using-git-to-collaborate-with-people-who-dont-use-git.html</link>
          <pubDate>Wed, 24 May 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2017/05/24/using-git-to-collaborate-with-people-who-dont-use-git.html</guid>
        </item>
   
        <item>
          <title>Git conflict resolving</title>
          <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: This post is a part of the &lt;a href=&quot;https://cquic.github.io/summer17-computing-workshop/&quot;&gt;2017 CQuIC computing summer workshop&lt;/a&gt; lessons with audio records available on the linked website. Please download the &lt;a href=&quot;https://github.com/CQuIC/summer17-computing-workshop/releases/download/s3/session-3.zip&quot;&gt;lesson material&lt;/a&gt; in order to run the examples used in this lesson.&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;This tutorial is adapted from &lt;a href=&quot;http://swcarpentry.github.io/git-novice/09-conflict/&quot;&gt;the Software Carpentry workshop&lt;/a&gt; under the Creative Commons license.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As soon as people can work in parallel, it’s likely someone’s going to step on someone else’s toes. This will even happen with a single person: if we are working on a piece of software on both our laptop and a server in the lab, we could make different changes to each copy. Version control helps us manage these &lt;a href=&quot;https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/&quot;&gt;conflicts&lt;/a&gt; by giving us tools to resolve overlapping changes.&lt;/p&gt;
&lt;h2 id=&quot;resolving-conflict-on-textual-files&quot;&gt;Resolving conflict on textual files&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: This part has been basically covered by Travis, if you feel confident about it, you can jump to the next session following–on non-textual conflicts.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To see how we can resolve conflicts, we must first create one. The file &lt;code&gt;mars.txt&lt;/code&gt; currently looks like this in both partners’ copies of our &lt;code&gt;planets&lt;/code&gt; repository:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat mars.txt
Cold and dry, but everything is my favorite color
The two moons may be a problem for Wolfman
But the Mummy will appreciate the lack of humidity&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s add a line to one partner’s copy only:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ nano mars.txt
$ cat mars.txt
Cold and dry, but everything is my favorite color
The two moons may be a problem for Wolfman
But the Mummy will appreciate the lack of humidity
This line added to Wolfman&amp;#39;s copy&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then push the change to GitHub:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add mars.txt
$ git commit -m &amp;quot;Add a line in our home copy&amp;quot;
[master 5ae9631] Add a line in our home copy
 1 file changed, 1 insertion(+)
$ git push origin master
Counting objects: 5, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 352 bytes, done.
Total 3 (delta 1), reused 0 (delta 0)
To https://github.com/vlad/planets
   29aba7c..dabb4c8  master -&amp;gt; master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s have the other partner make a different change to their copy &lt;em&gt;without&lt;/em&gt; updating from GitHub:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ nano mars.txt
$ cat mars.txt
Cold and dry, but everything is my favorite color
The two moons may be a problem for Wolfman
But the Mummy will appreciate the lack of humidity
We added a different line in the other copy&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can commit the change locally:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add mars.txt
$ git commit -m &amp;quot;Add a line in my copy&amp;quot;
[master 07ebc69] Add a line in my copy
 1 file changed, 1 insertion(+)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but Git won’t let us push it to GitHub:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git push origin master
To https://github.com/vlad/planets.git
 ! [rejected]        master -&amp;gt; master (non-fast-forward)
error: failed to push some refs to &amp;#39;https://github.com/vlad/planets.git&amp;#39;
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. &amp;#39;git pull&amp;#39;)
hint: before pushing again.
hint: See the &amp;#39;Note about fast-forwards&amp;#39; in &amp;#39;git push --help&amp;#39; for details.&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
&lt;img src=&quot;/en/assets/img/conflict.svg&quot; alt=&quot;The Conflicting Changes&quot; /&gt;&lt;figcaption&gt;The Conflicting Changes&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Git detects that the changes made in one copy overlap with those made in the other and stops us from trampling on our previous work. What we have to do is pull the changes from GitHub, &lt;a href=&quot;/reference/#merge&quot;&gt;merge&lt;/a&gt; them into the copy we’re currently working in, and then push that. Let’s start by pulling:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git pull origin master
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 1), reused 3 (delta 1)
Unpacking objects: 100% (3/3), done.
From https://github.com/vlad/planets
 * branch            master     -&amp;gt; FETCH_HEAD
Auto-merging mars.txt
CONFLICT (content): Merge conflict in mars.txt
Automatic merge failed; fix conflicts and then commit the result.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt; tells us there’s a conflict, and marks that conflict in the affected file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat mars.txt
Cold and dry, but everything is my favorite color
The two moons may be a problem for Wolfman
But the Mummy will appreciate the lack of humidity
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
We added a different line in the other copy
=======
This line added to Wolfman&amp;#39;s copy
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; dabb4c8c450e8475aee9b14b4383acc99f42af1d&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our change—the one in &lt;code&gt;HEAD&lt;/code&gt;—is preceded by &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;. Git has then inserted &lt;code&gt;=======&lt;/code&gt; as a separator between the conflicting changes and marked the end of the content downloaded from GitHub with &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;. (The string of letters and digits after that marker identifies the commit we’ve just downloaded.)&lt;/p&gt;
&lt;p&gt;It is now up to us to edit this file to remove these markers and reconcile the changes. We can do anything we want: keep the change made in the local repository, keep the change made in the remote repository, write something new to replace both, or get rid of the change entirely. Let’s replace both so that the file looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat mars.txt
Cold and dry, but everything is my favorite color
The two moons may be a problem for Wolfman
But the Mummy will appreciate the lack of humidity
We removed the conflict on this line&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To finish merging, we add &lt;code&gt;mars.txt&lt;/code&gt; to the changes being made by the merge and then commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add mars.txt
$ git status
On branch master
All conflicts fixed but you are still merging.
  (use &amp;quot;git commit&amp;quot; to conclude merge)
Changes to be committed:
    modified:   mars.txt
$ git commit -m &amp;quot;Merge changes from GitHub&amp;quot;
[master 2abf2b1] Merge changes from GitHub&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can push our changes to GitHub:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git push origin master
Counting objects: 10, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 697 bytes, done.
Total 6 (delta 2), reused 0 (delta 0)
To https://github.com/vlad/planets.git
   dabb4c8..2abf2b1  master -&amp;gt; master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Git keeps track of what we’ve merged with what, so we don’t have to fix things by hand again when the collaborator who made the first change pulls again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git pull origin master
remote: Counting objects: 10, done.
remote: Compressing objects: 100% (4/4), done.
remote: Total 6 (delta 2), reused 6 (delta 2)
Unpacking objects: 100% (6/6), done.
From https://github.com/vlad/planets
 * branch            master     -&amp;gt; FETCH_HEAD
Updating dabb4c8..2abf2b1
Fast-forward
 mars.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We get the merged file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat mars.txt
Cold and dry, but everything is my favorite color
The two moons may be a problem for Wolfman
But the Mummy will appreciate the lack of humidity
We removed the conflict on this line&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We don’t need to merge again because Git knows someone has already done that.&lt;/p&gt;
&lt;p&gt;Git’s ability to resolve conflicts is very useful, but conflict resolution costs time and effort, and can introduce errors if conflicts are not resolved correctly. If you find yourself resolving a lot of conflicts in a project, consider one of these approaches to reducing them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Try breaking large files apart into smaller files so that it is less likely that two authors will be working in the same file at the same time&lt;/li&gt;
&lt;li&gt;Clarify who is responsible for what areas with your collaborators&lt;/li&gt;
&lt;li&gt;Discuss what order tasks should be carried out in with your collaborators so that tasks that will change the same file won’t be worked on at the same time&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;conflicts-on-non-textual-files&quot;&gt;Conflicts on Non-textual files&lt;/h2&gt;
&lt;p&gt;What does Git do when there is a conflict in an image or some other non-textual file that is stored in version control?&lt;/p&gt;
&lt;p&gt;Let’s try it using our established &lt;code&gt;testwebsite&lt;/code&gt; git repo from the &lt;a href=&quot;/en/2017/05/22/git-remote-and-github.html&quot;&gt;git remote section&lt;/a&gt;. Suppose you are working on the &lt;code&gt;master&lt;/code&gt; branch, and your collaborator, Josh, is working on the &lt;code&gt;gh-pages&lt;/code&gt; branch, and both of you want to change a picture called &lt;code&gt;productcurveaccum.png&lt;/code&gt; under the &lt;code&gt;assets/images/&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;Here is what you are going to do on the &lt;code&gt;master&lt;/code&gt; branch: &lt;sub&gt;~&lt;/sub&gt; $ git checkout master $ cd assets/images/ $ ls online-cv-jekyll-theme-2.png productcurveaccumless.png online-cv-jekyll-theme.png productcurveaccum.png online-cv-responsive-jekyll-theme.png profile.png &lt;sub&gt;~&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ls&lt;/code&gt; shows us that there are a few pictures in the folder. Feel free to open those images to see how they look like. I suggest to use a powerful text editor like &lt;a href=&quot;https://atom.io&quot;&gt;Atom&lt;/a&gt; to preview your project files in one place. Next, suppose you want to use &lt;code&gt;productcurveaccumless.png&lt;/code&gt; to replace &lt;code&gt;productcurveaccum.jpg&lt;/code&gt; on the master branch and eventually want to merge this changes to the &lt;code&gt;gh-pages&lt;/code&gt; branch of this repository. You do&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cp productcurveaccumless.png productcurveaccum.png
$ git add .
$ git commit -m &amp;quot;Replace productaccum with productaccumless.&amp;quot;
[master a140253] Replace productaccum with productaccumless.
 1 file changed, 0 insertions(+), 0 deletions(-)
 rewrite assets/images/productcurveaccumless.png (99%)
$ git push origin master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that, when I use git commands, I don’t have to be on the root directory of the corresponding git repo’s local folder. Git will automatically look for the &lt;code&gt;.git&lt;/code&gt; folder in the current and up-level folders until it finds the correct one.&lt;/p&gt;
&lt;p&gt;Suppose that Josh later replaced the &lt;code&gt;productcurveaccum.png&lt;/code&gt; with another picture called &lt;code&gt;online-cv-jekyll-theme-2&lt;/code&gt; on the &lt;code&gt;gh-pages&lt;/code&gt; branch on the same computer. Let’s assume you are Josh now, and you do the following for him:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout gh-pages
$ cp online-cv-jekyll-theme-2.png productcurveaccum.png
$ git status
On branch gh-pages
Changes not staged for commit:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)

    modified:   productcurveaccum.png

no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)
$ git add .
$ git commit -m &amp;quot;Replace productaccum with online-cv.&amp;quot;
[gh-pages 2c1af41] Replace productaccum with online-cv.
 1 file changed, 0 insertions(+), 0 deletions(-)
 rewrite assets/images/productcurveaccum.png (98%)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, imagine you come back and want to merge the &lt;code&gt;master&lt;/code&gt; branch to the &lt;code&gt;gh-pages&lt;/code&gt; branch, you will find there is a conflict.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout gh-pages
$ git merge master
warning: Cannot merge binary files: assets/images/productcurveaccum.png (HEAD vs. master)
Auto-merging assets/images/productcurveaccum.png
CONFLICT (content): Merge conflict in assets/images/productcurveaccum.png
Automatic merge failed; fix conflicts and then commit the result.
$ git status
On branch gh-pages
You have unmerged paths.
  (fix conflicts and run &amp;quot;git commit&amp;quot;)

Unmerged paths:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to mark resolution)

    both modified:   productcurveaccum.png

no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, when there is a conflict on an image or other binary files, git prints a message with which two sources (branches &lt;code&gt;HEAD vs. master&lt;/code&gt;) generated this conflict and which files (&lt;code&gt;assets/images/productcurveaccum.png&lt;/code&gt;) were affected. The &lt;code&gt;HEAD&lt;/code&gt; means the current &lt;code&gt;gh-pages&lt;/code&gt; branch. More commonly, if you pull a remote &lt;code&gt;master&lt;/code&gt; branch and then merge with &lt;code&gt;git merge origin/master&lt;/code&gt;, you will get a similar conflict message with &lt;code&gt;origin/master&lt;/code&gt; replacing &lt;code&gt;master&lt;/code&gt; as the conflicting source.&lt;/p&gt;
&lt;p&gt;The conflict message here is mostly the same as it was for &lt;code&gt;mars.txt&lt;/code&gt; in the textual case, but there is one key additional line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;warning: Cannot merge binary files...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Git cannot automatically insert conflict markers into an image, or in general a binary file, as it does for text files. So, instead of editing the image file, we must check out the version we want to keep. Then we can add and commit this version. Notice that, the binary file is still as it was in the branch. Git stores the conflict information and the version from the merging source branch in the hidden &lt;code&gt;.git&lt;/code&gt; history folder.&lt;/p&gt;
&lt;p&gt;On the key line above, Git has conveniently given us commit identifiers for the two versions of &lt;code&gt;productcurveaccum.png&lt;/code&gt;. Our version is &lt;code&gt;HEAD&lt;/code&gt;, and Josh’s version is &lt;code&gt;master&lt;/code&gt;. If we want to use our version, we can use &lt;code&gt;git checkout&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout HEAD productcurveaccum.png
$ git add productcurveaccum.png
$ git status
On branch gh-pages
All conflicts fixed but you are still merging.
  (use &amp;quot;git commit&amp;quot; to conclude merge)

Changes to be committed:

    modified:   productcurveaccum.png&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, you can also use&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout --ours productcurveaccum.png
$ git status
On branch gh-pages
All conflicts fixed but you are still merging.
  (use &amp;quot;git commit&amp;quot; to conclude merge)

Changes to be committed:

    modified:   productcurveaccum.png&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with the &lt;code&gt;--ours&lt;/code&gt; switch.&lt;/p&gt;
&lt;p&gt;If instead we want to use Josh’s version on the master branch, we can use &lt;code&gt;git checkout&lt;/code&gt; with Josh’s commit identifier, &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;--theirs&lt;/code&gt; instead:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout --theirs productcurveaccum.png
$ git status
On branch gh-pages
All conflicts fixed but you are still merging.
  (use &amp;quot;git commit&amp;quot; to conclude merge)

Changes to be committed:

    modified:   productcurveaccum.png&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also keep &lt;em&gt;both&lt;/em&gt; images. The catch is that we cannot keep them under the same name. But, we can check out each version in succession and &lt;em&gt;rename&lt;/em&gt; it, then add the renamed versions. First, check out each image and rename it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout HEAD productcurveaccum.png
$ git mv productcurveaccum.png productcurveaccum-josh.png
$ git checkout --theirs productcurveaccum.png
$ mv productcurveaccum.png productcurveaccum-master.jpg&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, remove the old &lt;code&gt;productcurveaccum.png&lt;/code&gt; and add the two new files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git rm productcurveaccum.png
$ git add productcurveaccum-josh.png
$ git add productcurveaccum-master.png&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way the original picture doesn’t exist any more. Instead, you have two versions co-exist for you and your collaborators to review before deciding which to keep.&lt;/p&gt;
&lt;p&gt;Either way, once you decide which one to use, you can then commit the staged changes and push to the remote &lt;code&gt;gh-pages&lt;/code&gt; branch to view the result online.&lt;/p&gt;
&lt;p&gt;Similarly, you can also use &lt;code&gt;git checkout ID productcurveaccum.png&lt;/code&gt; to revert the version to an arbitrary historical version with a &lt;code&gt;SHA&lt;/code&gt; identifier, &lt;code&gt;ID&lt;/code&gt;. Don’t forget to switch back to &lt;code&gt;HEAD&lt;/code&gt; or the version you really want to commit if you don’t want to do the reverse.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;A side note:&lt;/em&gt;&lt;/strong&gt; If you want to revert your revision of all your files in the repo to the &lt;code&gt;SHA-xxxxx&lt;/code&gt; commit stage, you can use&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git reset --hard SHA-xxxxx&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or revert to the previous HEAD point by&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git reset --hard HEAD^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To push the reverted changes to remote, you should use &lt;code&gt;git push -f origin BRANCHNAME&lt;/code&gt; with the switch &lt;code&gt;-f&lt;/code&gt; to force the upload in this case.&lt;/p&gt;
&lt;blockquote class=&quot;challenge&quot;&gt;
&lt;h2 id=&quot;challenge-a-typical-work-session&quot;&gt;Challenge: A Typical Work Session&lt;/h2&gt;
&lt;p&gt;You sit down at your computer to work on a shared project that is tracked in a remote Git repository. During your work session, you take the following actions, but not in this order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Make changes&lt;/em&gt; by appending the number &lt;code&gt;100&lt;/code&gt; to a text file &lt;code&gt;numbers.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Update remote&lt;/em&gt; repository to match the local repository&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Celebrate&lt;/em&gt; your success with beer(s)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Update local&lt;/em&gt; repository to match the remote repository&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Stage changes&lt;/em&gt; to be committed&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Commit changes&lt;/em&gt; to the local repository&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In what order should you perform these actions to minimize the chances of conflicts? Put the commands above in order in the &lt;em&gt;action&lt;/em&gt; column of the table below. When you have the order right, see if you can write the corresponding commands in the &lt;em&gt;command&lt;/em&gt; column. A few steps are populated to get you started.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th style=&quot;text-align: left;&quot;&gt;order,&lt;/th&gt;
&lt;th style=&quot;text-align: left;&quot;&gt;action . . . . . . . . . .&lt;/th&gt;
&lt;th style=&quot;text-align: left;&quot;&gt;command . . . . . . . . . .&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;echo 100 &amp;gt;&amp;gt; numbers.txt&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;6&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Celebrate!&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;AFK&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote class=&quot;solution&quot;&gt;
&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th style=&quot;text-align: left;&quot;&gt;order,&lt;/th&gt;
&lt;th style=&quot;text-align: left;&quot;&gt;action . . . . . .&lt;/th&gt;
&lt;th style=&quot;text-align: left;&quot;&gt;command . . . . . . . . . . . . . . . . . . .&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Update local&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;git pull origin master&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Make changes&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;echo 100 &amp;gt;&amp;gt; numbers.txt&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Stage changes&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;git add numbers.txt&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Commit changes&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;git commit -m &amp;quot;Add 100 to numbers.txt&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Update remote&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;git push origin master&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;6&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Celebrate!&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;AFK&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;


&lt;div class=&quot;references&quot;&gt;

&lt;/div&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2017/05/23/git-conflict-resolving.html</link>
          <pubDate>Tue, 23 May 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2017/05/23/git-conflict-resolving.html</guid>
        </item>
   
        <item>
          <title>Github remote and Github</title>
          <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;This post is a part of the &lt;a href=&quot;https://cquic.github.io/summer17-computing-workshop/&quot;&gt;2017 CQuIC computing summer workshop tutorial materials&lt;/a&gt; with the audio records available from the linked website. Please download the &lt;a href=&quot;https://github.com/CQuIC/summer17-computing-workshop/releases/download/s3/session-3.zip&quot;&gt;lesson material&lt;/a&gt; in order to run the examples used in this lesson.&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;This tutorial is adapted from &lt;a href=&quot;http://swcarpentry.github.io/git-novice/07-github/&quot;&gt;the Software Carpentry workshop&lt;/a&gt; under the Creative Commons license.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Version control really comes into its own when we begin to collaborate with other people. We already have most of the machinery we need to do this; the only thing missing is to copy changes from one repository to another.&lt;/p&gt;
&lt;p&gt;Systems like Git allow us to move work between any two repositories. In practice, though, it’s easiest to use one copy as a central hub, and to keep it on the web rather than on someone’s laptop. Most programmers use hosting services like &lt;a href=&quot;http://github.com&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=&quot;http://bitbucket.org&quot;&gt;BitBucket&lt;/a&gt;, &lt;a href=&quot;http://gitlab.com/&quot;&gt;GitLab&lt;/a&gt; or the &lt;a href=&quot;https://libutil.unm.edu/users/sign_in&quot;&gt;UNM GitLab service for UNM members&lt;/a&gt; to hold those master copies; we’ll explore the pros and cons of this in the final section of this lesson.&lt;/p&gt;
&lt;h2 id=&quot;set-up-local-and-remote-repositories&quot;&gt;Set up local and remote repositories&lt;/h2&gt;
&lt;p&gt;Let’s start by sharing the changes we’ve made to our current project with the world. Log in to GitHub, then click on the icon in the top right corner to create a new repository called &lt;code&gt;testwebsite&lt;/code&gt;:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/en/assets/img/github-create-repo-01.png&quot; alt=&quot;Creating a Repository on GitHub (Step 1)&quot; /&gt;&lt;figcaption&gt;Creating a Repository on GitHub (Step 1)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Name your repository “testwebsite” and then click “Create Repository”:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/en/assets/img/github-create-repo-02.png&quot; alt=&quot;Creating a Repository on GitHub (Step 2)&quot; /&gt;&lt;figcaption&gt;Creating a Repository on GitHub (Step 2)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As soon as the repository is created, GitHub displays a page with a URL and some information on how to configure your local repository:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/en/assets/img/github-create-repo-03.png&quot; alt=&quot;Creating a Repository on GitHub (Step 3)&quot; /&gt;&lt;figcaption&gt;Creating a Repository on GitHub (Step 3)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This effectively does the following on GitHub’s servers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir testwebsite
cd testwebsite
git init&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we have created a repository on the GitHub server as a remote repository, but the remote repository on GitHub doesn’t contain any files yet. We will need to create local files and upload them to the remote repository. To do that, you can navigate to your local working directory pre-downloaded from the &lt;a href=&quot;https://github.com/CQuIC/summer17-computing-workshop/&quot;&gt;IT workshop repo&lt;/a&gt; and then&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
&lt;img src=&quot;/en/assets/img/git-freshly-made-github-repo.png&quot; alt=&quot;Freshly-Made GitHub Repository&quot; /&gt;&lt;figcaption&gt;Freshly-Made GitHub Repository&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The next step is to connect the two repositories. We do this by making the GitHub repository a &lt;a href=&quot;https://help.github.com/categories/managing-remotes/&quot;&gt;remote&lt;/a&gt; for the local repository. The home page of the repository on GitHub includes the string we need to identify it:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/en/assets/img/github-find-repo-string.png&quot; alt=&quot;Where to Find Repository URL on GitHub&quot; /&gt;&lt;figcaption&gt;Where to Find Repository URL on GitHub&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Click on the ‘HTTPS’ link to change the &lt;a href=&quot;https://gist.github.com/grawity/4392747&quot;&gt;protocol&lt;/a&gt; to HTTPS.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;A side note on HTTPS vs. SSH&lt;/h2&gt;
&lt;p&gt;We use HTTPS here because it does not require additional configuration. After the workshop you may want to set up SSH access, which is a bit more secure, by following one of the great tutorials from &lt;a href=&quot;https://help.github.com/articles/generating-ssh-keys&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=&quot;https://confluence.atlassian.com/display/BITBUCKET/Set+up+SSH+for+Git&quot;&gt;Atlassian/BitBucket&lt;/a&gt; and &lt;a href=&quot;https://about.gitlab.com/2014/03/04/add-ssh-key-screencast/&quot;&gt;GitLab&lt;/a&gt; (this one has a screencast).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;
&lt;img src=&quot;/en/assets/img/github-change-repo-string.png&quot; alt=&quot;Changing the Repository URL on GitHub&quot; /&gt;&lt;figcaption&gt;Changing the Repository URL on GitHub&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Copy that URL from the browser, go into the local &lt;code&gt;testwebsite&lt;/code&gt; repository, and run this command (replace &lt;code&gt;i2000s&lt;/code&gt; with your github username–so as all similar commands in this article):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote add origin https://github.com/i2000s/testwebsite.git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure to use the URL for your repository rather than i2000s’s: the only difference should be your username instead of &lt;code&gt;i2000s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can check that the command has worked by running &lt;code&gt;git remote -v&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote -v
origin   https://github.com/i2000s/testwebsite.git (push)
origin   https://github.com/i2000s/testwebsite.git (fetch)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;push-to-remote&quot;&gt;Push to remote&lt;/h2&gt;
&lt;p&gt;The name &lt;code&gt;origin&lt;/code&gt; is a local nickname for your remote repository. We could use something else if we wanted to, but &lt;code&gt;origin&lt;/code&gt; is by far the most common choice.&lt;/p&gt;
&lt;p&gt;Once the nickname &lt;code&gt;origin&lt;/code&gt; is set up, this command will push the changes from our local repository to the repository on GitHub:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git push origin master
Counting objects: 130, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (127/127), done.
Writing objects: 100% (130/130), 1.03 MiB | 0 bytes/s, done.
Total 130 (delta 21), reused 0 (delta 0)
remote: Resolving deltas: 100% (21/21), done.
To https://github.com/i2000s/testwebsite.git
 * [new branch]      master -&amp;gt; master
Branch master set up to track remote branch master from origin.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that, in the pushing process, you may be asked to provide a github username and password. This could happen every time you push a repo to remote. You can actually set up a default username to the remote URL so that git won’t ask you your github username again. The new url should be something like &lt;code&gt;https://i2000s@github.com/testwebsite.git&lt;/code&gt; (replace &lt;code&gt;i2000s&lt;/code&gt; with your real github username). This URL can either be modifed by editting the &lt;code&gt;.git/config&lt;/code&gt; file or type command line&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote set-url origin https://i2000s@github.com/testwebsite.git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want not to type your password every time neither, you can replace the url to origin in the formation of &lt;code&gt;https://i2000s:YOURPASSWORD@github.com/testwebsite.git&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Up to now, our local and remote repositories are in this state:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/en/assets/img/github-repo-after-first-push.png&quot; alt=&quot;GitHub Repository After First Push&quot; /&gt;&lt;figcaption&gt;GitHub Repository After First Push&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When you push for the first time to a remote, you may also want to use a &lt;code&gt;-u&lt;/code&gt; option used with &lt;code&gt;git push&lt;/code&gt;. This option is synonymous with the &lt;code&gt;--set-upstream-to&lt;/code&gt; option for the &lt;code&gt;git branch&lt;/code&gt; command, and is used to associate the current branch with a remote branch so that the &lt;code&gt;git pull&lt;/code&gt; command can be used without any arguments. To do this, simply use &lt;code&gt;git push -u origin master&lt;/code&gt; once the remote has been set up.&lt;/p&gt;
&lt;h2 id=&quot;pull-from-remote&quot;&gt;Pull from remote&lt;/h2&gt;
&lt;p&gt;We can pull changes from the remote repository to the local one as well:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git pull origin master
From https://github.com/i2000s/testwebsite
 * branch            master     -&amp;gt; FETCH_HEAD
Already up-to-date.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pulling has no effect in this case because the two repositories are already synchronized. If someone else had pushed some changes to the repository on GitHub, though, this command would download them to our local repository.&lt;/p&gt;
&lt;p&gt;In the case that you have many branches, and don’t want to automatically merge the changes to your local branch, the &lt;code&gt;pull&lt;/code&gt; command can be actually decomposed into to two steps:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git fetch origin
$ git merge origin/master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first line fetch the changes from all branches to your local computer which will yield an output to show which branch got a change. The second line merges the change on the &lt;code&gt;master&lt;/code&gt; branch from the remote fetch to your current local branch. This command is very flexible so that you can merge arbitrary remote branch to your current local branch.&lt;/p&gt;
&lt;h2 id=&quot;github-gui-and-collaboration-features&quot;&gt;GitHub GUI and collaboration features&lt;/h2&gt;
&lt;p&gt;Browse to your &lt;code&gt;testwebsite&lt;/code&gt; repository on GitHub. Under the Code tab, find and click on the text that says “XX commits” (where “XX” is some number). Whenever you push the contents of your local repository to the remote, GitHub also generate a timestamps for each commit. Hover over, and click on, the three buttons to the right of each commit. What information can you gather/explore from these buttons? How would you get that same information in the shell?&lt;/p&gt;
&lt;p&gt;The answer is the following: The left-most button (with the picture of a clipboard) copies the full identifier of the commit to the clipboard. In the shell, &lt;code&gt;git log&lt;/code&gt; will show you the full commit identifier for each commit.&lt;/p&gt;
&lt;p&gt;When you click on the middle button, you’ll see all of the changes that were made in that particular commit. Green shaded lines indicate additions and red ones removals. In the shell we can do the same thing with &lt;code&gt;git diff&lt;/code&gt;. In particular, &lt;code&gt;git diff ID1..ID2&lt;/code&gt; where ID1 and ID2 are commit identifiers (e.g. &lt;code&gt;git diff a3bf1e5..041e637&lt;/code&gt;) will show the differences between those two commits.&lt;/p&gt;
&lt;p&gt;The right-most button lets you view all of the files in the repository at the time of that commit. To do this in the shell, we’d need to checkout the repository at that particular time. We can do this with &lt;code&gt;git checkout ID&lt;/code&gt; where ID is the identifier of the commit we want to look at. If we do this, we need to remember to put the repository back to the right state afterwards!&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/en/assets/img/github-interface.png&quot; alt=&quot;GitHub Repository Interface&quot; /&gt;&lt;figcaption&gt;GitHub Repository Interface&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Now, let’s see some functions that are only available using GitHub and other remote services. On your web browser, go to &lt;a href=&quot;https://github.com/CQuIC/dont-forget-names&quot;&gt;https://github.com/CQuIC/dont-forget-names&lt;/a&gt;. This is the &lt;strong&gt;&lt;em&gt;Don’t Forget Names&lt;/em&gt;&lt;/strong&gt; equation table put on the wall in the CQuIC coffee room with the initiative by Josh Combes and other CQuIC students. What we are exploring here are the features that really make collaboration easy. As shown in the figure above or the GitHub interface you see on your web browser, the line below the repo’s name includes a few menu buttons named as &lt;em&gt;Code&lt;/em&gt;, &lt;em&gt;Issues&lt;/em&gt;, &lt;em&gt;Pull Requests&lt;/em&gt;, &lt;em&gt;Wiki&lt;/em&gt;, &lt;em&gt;Settings&lt;/em&gt; and &lt;em&gt;Insights&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You can try click on the &lt;code&gt;Fork&lt;/code&gt; button on the right-above corner of &lt;em&gt;Insights&lt;/em&gt; menu item. That way, you have made an associated copy under your own GitHub account, and GitHub should be forward you to your own forked repo after this operation. Feel free to clone the forked repo to your local directory and compile the PDF by running &lt;code&gt;make&lt;/code&gt; in your command terminal. If you would like to add your own name as an “equation” or a “formula” in the TeX file, you can commit the change and push it to your forked repo. Now, you should be able to click on the “Pull Request” button to push your own changes to the &lt;em&gt;Dont-forget-names&lt;/em&gt; repo under the CQuIC account – let’s call it as the upstream repo. Before you do the Pull Request (PR), it is always good to commit your updates to a new branch other than the default master branch by, for example, &lt;code&gt;git checkout -b patch-1  git add .  git commit -m &amp;quot;Update new names.&amp;quot;  git push origin patch-1&lt;/code&gt; Next, on your web browser click on the &lt;em&gt;Pull Request&lt;/em&gt; button and select the &lt;code&gt;patch-1&lt;/code&gt; branch to be pushed to the &lt;code&gt;master&lt;/code&gt; branch of the upstream repo. After this operation, the upstream repo on the web browser should have a flagged a new Pull Request if you click on the &lt;em&gt;Pull Requests&lt;/em&gt; menu item. A member of the repo who has write access can then merge/rebase/commit on your PR.&lt;/p&gt;
&lt;p&gt;One can also use the &lt;strong&gt;&lt;em&gt;Issues&lt;/em&gt;&lt;/strong&gt; menu page to start discussing bugs, features requests or problems related to the code in the repo. An issue can be closed or organized with other issues–even crossing repos on the &lt;strong&gt;&lt;em&gt;Projects&lt;/em&gt;&lt;/strong&gt; page.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;&lt;em&gt;Wiki&lt;/em&gt;&lt;/strong&gt; page is nothing but a repo with &lt;a href=&quot;https://help.github.com/articles/adding-and-editing-wiki-pages-locally/&quot;&gt;GitHub-flavored Markdown&lt;/a&gt; documentations (we will discuss later). One can edit the wiki pages of the repo online through the GitHub interface or edit them locally by cloning the repo with &lt;code&gt;git clone https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.wiki.git&lt;/code&gt; In our case, &lt;code&gt;YOUR_USERNAME&lt;/code&gt; is the organization name, &lt;code&gt;CQuIC&lt;/code&gt;; &lt;code&gt;YOUR_REPOSITORY&lt;/code&gt; is &lt;code&gt;Dont-forget-names&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;&lt;em&gt;Settings&lt;/em&gt;&lt;/strong&gt; page, as you can guess, has all the common options the owner of the repo can manage how the repo is organized, like inviting GitHub members to join the repo with &lt;em&gt;read&lt;/em&gt;/&lt;em&gt;edit&lt;/em&gt;/&lt;em&gt;management&lt;/em&gt; permissions, and switching the repo to be visible or invisible to public. If you are an owner of the CQuIC or other organization on GitHub, you can have more options to grant permissions to collaborators in a very detailed level.&lt;/p&gt;
&lt;p&gt;These features of GitHub facilitate collaborations among people inside or outside of the repo group in a great extend.&lt;/p&gt;
&lt;h2 id=&quot;github-license-readme-files-and-the-gh-pages-branch&quot;&gt;GitHub License, README files and the gh-pages branch&lt;/h2&gt;
&lt;p&gt;In this section we learned about creating a remote repository on GitHub, but when you initialized your GitHub repo, you didn’t add a &lt;code&gt;README.md&lt;/code&gt; or a license file. If you had, what do you think would have happened when you tried to link your local and remote repositories? In this case, since we already had a &lt;code&gt;README&lt;/code&gt; file in our own (local) repository, we’d see a merge conflict (when git realises that there are two versions of the file and asks us to reconcile the differences). We will discuss git conflict resolving in the next session, and for now, we will take a look on the &lt;code&gt;README.md&lt;/code&gt; file provided in the folder and create a new branch to generate a static website via GitHub.&lt;/p&gt;
&lt;p&gt;Now, you can use your favorite text editor to preview the &lt;code&gt;README.md&lt;/code&gt; file. The &lt;code&gt;*.md&lt;/code&gt; extension usually means the file is a &lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;markdown&lt;/a&gt; file. Specifically, here we use the &lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;GitHub Flavored Markdown syntax&lt;/a&gt; for styling documentations as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Markup_language&quot;&gt;markup&lt;/a&gt; language implementation supported by GitHub. I personally use &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; to edit markdown files since it has an integrated Markdown previewer. If you do want to use Atom, you can press &lt;code&gt;Ctrl + Shift + P&lt;/code&gt; and type in &lt;code&gt;Install packages&lt;/code&gt; to find the &lt;code&gt;install packages/themes&lt;/code&gt; function in the menu (or use the menu &lt;code&gt;Packages/Settings View/Install Packages/Themes&lt;/code&gt; to open the panel); In the search bar, type in &lt;code&gt;markdown-preview&lt;/code&gt; to see if you have the markdown previewer (the one with the Atom logo) installed or not; If so, go to &lt;code&gt;File/Add Project Folder&lt;/code&gt; and add your current git local working directory as your project, open the &lt;code&gt;README.md&lt;/code&gt; file on Atom, and navigate to the menu called &lt;code&gt;Packages/Markdown Preview/Toggle Preview&lt;/code&gt; to open up a second preview panel along side of the &lt;code&gt;README.md&lt;/code&gt; source file.&lt;/p&gt;
&lt;p&gt;From the preview panel, you can easily see how the markdown syntax generates basic formations and how complicated formations can be all managed in plain texts.&lt;/p&gt;
&lt;p&gt;Similarly to the license file. Normally, we need to be clear on what is the protocol to use the content, and the LICENSE file serves the purpose. More details can be found in &lt;a href=&quot;http://swcarpentry.github.io/git-novice/11-licensing/&quot;&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this part, we will start making a &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; website using github’s GitHub pages service.&lt;/p&gt;
&lt;p&gt;Now on your computer’s terminal, create a new branch based on the master branch by&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout -b gh-pages
git push origin gh-pages&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a new branch called &lt;code&gt;gh-pages&lt;/code&gt; and push it to the remote repository. As a result, GitHub renders your markdown or HTML template/segment codes into HTML files using a Jekyll engine and generates a static website at &lt;code&gt;https://i2000s.github.io/testwebsite&lt;/code&gt;. You can view it on your web browser.&lt;/p&gt;
&lt;h2 id=&quot;comparison-among-remote-repository-hosting-service-providers&quot;&gt;Comparison among remote repository hosting service providers&lt;/h2&gt;
&lt;p&gt;Before we jump into GitHub even more, let’s talk about briefly on the similarities and differences among popular git remote service providers as mentioned at the beginning of this tutorial. A detailed comparison among GitHub, BitBucket, GitLab and Coding can be found &lt;a href=&quot;https://medium.com/flow-ci/github-vs-bitbucket-vs-gitlab-vs-coding-7cf2b43888a1&quot;&gt;here&lt;/a&gt;. We have created a GitHub organization for CQuIC so that we can create infinite number of private repos free of charge as a research and educational body. Feel free to best use this opportunity through the &lt;a href=&quot;https://github.com/CQuIC&quot;&gt;CQuIC@GitHub&lt;/a&gt; interface. Similarly, there is also a &lt;a href=&quot;https://gitlab.com/CQuIC&quot;&gt;CQuIC organization&lt;/a&gt; on GitLab in case we need some extra benefit besides GitHub. GitLab is more generous on large file storage than GitHub, but still caps at 10GB of total space for each repo.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://libutil.unm.edu/users/sign_in&quot;&gt;UNM GitLab server&lt;/a&gt; is a community version of the GitLab open-source tool installed on an UNM server. Compared to others, the UNM GitLab service is good at hosting &lt;a href=&quot;https://about.gitlab.com/2015/11/23/announcing-git-lfs-support-in-gitlab/&quot;&gt;Git large files&lt;/a&gt;, which I don’t see if there is a real cap. So, it could be helpful to manage repos with data files without obvious limitations. But the total number of repos one can have on the server is limited (up to 10); also, since the service is associated with UNM NetIDs, it’s not clear in the documentations how the repos be treated once a student repo owner graduates from UNM.&lt;/p&gt;
&lt;p&gt;Hopefully, this helps you on deciding which git remote server you want to use for your repos.&lt;/p&gt;
&lt;div class=&quot;references&quot;&gt;

&lt;/div&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2017/05/22/git-remote-and-github.html</link>
          <pubDate>Mon, 22 May 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2017/05/22/git-remote-and-github.html</guid>
        </item>
   
        <item>
          <title>My naive theory and some trial practices on systematic research management</title>
          <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;This post is a part of the &lt;a href=&quot;https://cquic.github.io/summer17-computing-workshop/&quot;&gt;2017 CQuIC computing summer workshop tutorial materials&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;a-lifecycle-model-of-productivity&quot;&gt;A lifecycle model of productivity&lt;/h1&gt;
As having been often observed, when we work on a subject, we usually experience the following productivity curve over time as plotted in the figure below.
&lt;center&gt;
&lt;div class=&quot;row&quot;&gt;&lt;figure&gt;
&lt;img src=&quot;/en/assets/img/productcurve.png&quot;   width=&quot;500px&quot;   align=&quot;center&quot; alt=&quot;A lifecycle curve of productivity over time.&quot;   /&gt;
&lt;figcaption&gt;
Fig 1. Lifecycle curve of productivity level when working on a task over time.
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;/center&gt;
&lt;p&gt;The curve is the lifecycle on how working on the subject yields valuable outputs, which typically includes a slow and low-efficient starting phase, a rapid climbing phase, a flat peaking phase and a slow decaying phase. In fact, this not only can be seen in task productivity but also occurs on almost everything in our daily lives, like people’s activity level over days and ages, the profit level a fashion or a product follows, the population growth curve of species in a resources-limited environment and so on.&lt;/p&gt;
&lt;p&gt;Now, imagine you have a bunch of subjects to work on over time and each of them has a similar lifecycle curve. You can arrange when you start to work on your subjects, and your peak productivity level working on the next subject might grow a little bit higher than the previous one.&lt;/p&gt;
We consider two scenarios. First, as shown in the figure on the left below, we continue working on new subjects before the previous subject’s productivity level decays.
&lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;center&gt;
&lt;div class=&quot;row&quot;&gt;&lt;figure&gt;
&lt;img src=&quot;/en/assets/img/productcurveaccum.png&quot;   width=&quot;400px&quot;   align=&quot;center&quot; alt=&quot;The way to have a continuous growth of productivity level over time. Dashed lines are the individual productivity lifecycle curves. Solid line is the sum of individual curves.&quot;   /&gt;
&lt;figcaption&gt;
&lt;ol type=&quot;A&quot;&gt;
&lt;li&gt;a continuous growth case
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;/center&gt;
&lt;/td&gt;&lt;td&gt;&lt;center&gt;&lt;div class=&quot;row&quot;&gt;&lt;figure&gt;
&lt;img src=&quot;/en/assets/img/productcurveaccumless.png&quot;   width=&quot;400px&quot;   align=&quot;center&quot; alt=&quot;Dippings occur when task interval increases.&quot;   /&gt;
&lt;figcaption&gt;
&lt;ol start=&quot;2&quot; type=&quot;A&quot;&gt;
&lt;li&gt;little-overlap case
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;/center&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;em&gt;Fig 2. A continuous growth (A) and oscillations (B) of productivity levels over time. Dashed lines are the individual productivity lifecycle curves. Solid line is the sum of individual curves.&lt;/em&gt;&lt;br /&gt;
&lt;/center&gt;
&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Obviously, the overall productivity curve experiences a non-decreasing growth over time as individual tasks’ productivity curves overlap.&lt;/p&gt;
&lt;p&gt;Next, we consider increasing the intervals between tasks so that the overlap between tasks is small. We could find the productivity curve illustrated in Fig 2 (B) above.&lt;/p&gt;
&lt;p&gt;Here are some conclusions based on the comparison of the two cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The overall productivity level can be maximized if different task cycles overlap.&lt;/li&gt;
&lt;li&gt;The condition to have non-decreasing overall productivity growth is that the joining cycle’s productivity curve starts increasing steeper than the decaying slop of the cycle started before it. In other words, it would be ideal to start a new task cycle earlier before the previous task cycle peaks.&lt;/li&gt;
&lt;li&gt;As you can imagine, the total long-term productivity curve will follow the growth rate of the peak productivities of the sequential task cycles which is determined by the improvements of using more efficient tools, mastering common skills and the ability of bundling many tasks together. Therefore, to keep up the positive growth of productivity curve in the long run will require us to keep learning from the past and mastering more tools and skills, as well as to automate and bunch more and more tasks at once.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although I am using a simple &lt;a href=&quot;https://en.wikipedia.org/wiki/Skew_normal_distribution&quot;&gt;skewed normal distribution&lt;/a&gt; to represent the typical productivity cycle curves, it should be easily adapted to real cases of competing dynamic processes when the resources are limited, and the conclusions above should still hold.&lt;/p&gt;
&lt;h1 id=&quot;create-a-sustainable-system-for-continuous-growth-and-convergence&quot;&gt;Create a sustainable system for continuous growth and convergence&lt;/h1&gt;
&lt;p&gt;What does this implies to our research projects?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you feel you are going to reach the climax of your current research project, it could also be a good time to wrap up and start thinking of your next project.&lt;/li&gt;
&lt;li&gt;Build your path on top of what you are good at and reuse your skills and knowledge gained in the past. This is usually most successful people do.&lt;/li&gt;
&lt;li&gt;Keep reading and discussing new ideas which have some overlap with your current research but not exactly the same. This might help you open up a new future path.&lt;/li&gt;
&lt;li&gt;Have a list of projects/subjects/skills ordered in terms of maturity (such as in alpha, beta and mature phases). Set up corresponding goals and strategies for each set.&lt;/li&gt;
&lt;li&gt;Take some time to learn new tools and automate some common tasks when you get a chance, which might pave the way for you to be more productive.&lt;/li&gt;
&lt;li&gt;Think and reflect on your past experiences periodically. You may “walk” slowly, but try not “walk” backwards.&lt;/li&gt;
&lt;li&gt;Study some fundamental theories from time to time which you think can be used in your future studies (like the summer studies we have been doing).&lt;/li&gt;
&lt;li&gt;Have a big picture and roadmap in your mind and make things coherent as a system. If you are not that visionary, listen to the advice from the elders and friends and build your exploration map on the shoulder of giants. This could help you achieve long-term goals step by step, and coordinate your plans.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;generalize-to-multiple-dimensions-and-other-cases&quot;&gt;Generalize to multiple dimensions and other cases&lt;/h1&gt;
&lt;p&gt;Obviously, you can easily generalize the &lt;strong&gt;&lt;em&gt;task cycles&lt;/em&gt;&lt;/strong&gt; to things related to collaborations, knowledge growth and tool using. In terms of improving productivity and efficiency, similar conclusions could hold. The key is to create some &lt;em&gt;overlaps&lt;/em&gt; and &lt;em&gt;continuous growth&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;What does this model implies for using version control tools and programming?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Work on different branches and features at the same time. After finishing up testing each of them, merge them together to the main stream.&lt;/li&gt;
&lt;li&gt;Divide a big program into smaller modules and write small functions which can be relatively easily tested and combined with different other modules to achieve various goals.&lt;/li&gt;
&lt;li&gt;Separate your functions on computing, data manipulation and plotting so that they can be reused in different cases and you don’t need to reproduce your data every time you want to plot out the results.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What is said about collaborations?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have some overlaps of interests yet still some variances of view points with collaborators. This will help the healthy growth of collaboration relationships and productivity. Same is true for other relationships of pursuing outcomes while reducing entropy to be stable.&lt;/li&gt;
&lt;li&gt;Starting from one easy collaboration before jumping into more complicated ones. Give some priority for collaborative works based on how ready they are going to fruit.&lt;/li&gt;
&lt;li&gt;Don’t just focus on one thing, but also have some branching-outs and divergent discussions with your collaborators for possible future works whenever conversions are not as productive.&lt;/li&gt;
&lt;li&gt;When you get a desk in an office, use the opportunity to talk to people in the same office–whether related to your research or not, things will grow.&lt;/li&gt;
&lt;li&gt;Work in parallel with collaborators on various things and prioritize tasks to break down barriers towards progress. For many cases, it is important to learn and maybe develop some shared tools for better workflows.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Sharing and developing program and documentation libraries inside and outside of a research group. Maybe every member can only contribute a little when they are working on their projects, but, overtime, these unique libraries could become a great advantage to help new group members to quickly take off on their researches and to improve the group’s work efficiency.&lt;/li&gt;
&lt;li&gt;Have some collaborative open-source/open-science projects and organize some public events, if possible, to help the group reach out to fresh minds. This is usually how the ecosystem and opportunities grow for your own research and the community’s well-beings.&lt;/li&gt;
&lt;li&gt;In a large scale, how the ecosystem grows will eventually determine how fast and healthy the group and society evolves. Never settle. Continue seeking for new possibilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;a-systematic-open-science-framework&quot;&gt;A systematic open-science framework&lt;/h1&gt;
&lt;p&gt;As a community, knowledge can be shared and discoveries can be achieved together in a relatively efficient fashion if less barriers but more shared common goals. Freedom can be maximized by fundamentally increasing the energy level as well as decreasing the entropy level. Optimization should be pursued in a global view rather than local. Without positive interactions, things can hardly be done as a whole. Yet, a well organized division of workloads, priority of doing things and the ease of open-access to common tools and knowledge will help the community form a sustainable ecosystem for long-term continuous development of discoveries, humanity and civilization.&lt;/p&gt;
&lt;p&gt;In the sense of organizing collaborations, version control technique is a science to be discovered even more in-depth than ever before and a practice to be sharpened to be even better by being examined in our real life. Even though individuals can definitely work things out on their own, it is better to have people organized and coordinated as a whole for a sustainable continuous development. Without systematical cooperation in a large scale, conflicts, ignorance and duplications could waste our energy and bring in painful experiences for people and slow down the development of the community in the end.&lt;/p&gt;
&lt;p&gt;Don’t forget what do you live and work for.&lt;/p&gt;
&lt;h1 id=&quot;some-helpful-version-control-publications-and-resources&quot;&gt;Some helpful version control publications and resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1609.00037&quot;&gt;Good Enough Practices in Scientific Computing&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://osf.io/&quot;&gt;Open science framework&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.github.com/activities/citable-code/&quot;&gt;Github and Zenodo integration for citable work&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.journals.elsevier.com/data-in-brief/policies-and-guidelines/public-repositories-to-store-and-find-data&quot;&gt;Elsevier and Mendeley Data repositories&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;references&quot;&gt;

&lt;/div&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2017/05/21/a-theory-and-practices-on-systematic-task-management.html</link>
          <pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2017/05/21/a-theory-and-practices-on-systematic-task-management.html</guid>
        </item>
   
        <item>
          <title>2017 summer study in CQuIC</title>
          <description>&lt;p&gt;Here in &lt;a href=&quot;https://cquic.unm.edu&quot;&gt;CQuIC&lt;/a&gt;, we are organizing some topic summer self-studies. This includes a 3-session IT workshop organized by students Travis Scholten, Jonathan Gross, Anupam Mitra and me to share some scientific programming skills to CQuIC students. The second main focus of our summer study is led by Prof. Ivan Deutsch on quantum chaos, randomness and scrambling which will be going on on Wednesday afternoons until mid August from 4pm to 5pm, Mountain time. Students and professors, as volunteers, will be picking up topics to chair those sessions.&lt;/p&gt;
&lt;p&gt;We hope to end the IT workshop with followup projects that participants would like to use all the skills learned during the workshop and the &lt;a href=&quot;https://cquic.github.io&quot;&gt;CQuIC@Github&lt;/a&gt; repositories to finish some programming tasks related to their researches. Travis, Jonathan, Anupam and I will be helping around and do the code review for the followup project. If you would like to participate, we may be able to let you in as well.&lt;/p&gt;
&lt;p&gt;For the rest of the summer study, we used to add people from outside of CQuIC via telecom, but this time it seems our telecom has been fully booked by Arizona collaborators. But I am happy to discuss questions related to those topics, personally.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Detailed schedule&lt;/em&gt;:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Scientific programming workshop–all material can be found on &lt;a href=&quot;https://cquic.github.io/summer17-computing-workshop/&quot;&gt;CQuIC@Github website&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;May 19: Visualization, shell and automation&lt;/li&gt;
&lt;li&gt;May 29: Git, symbolic calculation and parallelization (part I)&lt;/li&gt;
&lt;li&gt;June 1: Parallelization (part II), git remote and collaborations (materials will be available on this website), wrap up for followup projects&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot; type=&quot;1&quot;&gt;
&lt;li&gt;Self-study on quantum chaos, randomness and scrambling&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;May 30: Symmetries of level statistics — Haake Chaps 2-3 (every should read Chap. 1 to get some background from back in the day)&lt;/li&gt;
&lt;li&gt;June 7: DAMOP (no presentation, but perhaps continuation of Haake Chap 3 is necessary)&lt;/li&gt;
&lt;li&gt;June 14: Random matrices and chaos — Haake Chap 4.1-4,4, 4.7, 4.9, Supplemented by Edelman “Random matrix theory” Sec. 4 and Izeman “Introduction to Random-Matrix Theory pages 1-6.&lt;/li&gt;
&lt;li&gt;June 21: Random matrices and chaos — continuation&lt;/li&gt;
&lt;li&gt;June 28: Intro to scrambling and out-of-time-order correlators (black holes?)&lt;/li&gt;
&lt;li&gt;July 5: Scrambling in quantum phase space — Cotler et al. “Out-of-time-order Operators and the Butterfly Effect”&lt;/li&gt;
&lt;li&gt;July 12: Measuring the scrambling of quantum information - Swingle paper.&lt;/li&gt;
&lt;li&gt;July 19 and 26: ID on travel (you can decide to proceed without me)&lt;/li&gt;
&lt;li&gt;Aug. 2 Chaos as pseudo-randomness — Roberts and Yoshida “Chaos and complexity by design”&lt;/li&gt;
&lt;li&gt;Aug. 9 Chaos as pseudo-randomness continued&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;references&quot;&gt;

&lt;/div&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2017/05/20/2017-summer-study.html</link>
          <pubDate>Sat, 20 May 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2017/05/20/2017-summer-study.html</guid>
        </item>
   
        <item>
          <title>My SQuInT 2017 talk</title>
          <description>&lt;p&gt;My submission has been accepted to be presented as a talk at the &lt;a href=&quot;http://physics.unm.edu/SQuInT/2017/index.php&quot;&gt;SQuInT Workshop&lt;/a&gt; and is currently on the program schedule.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Day, Date&lt;/em&gt;&lt;/strong&gt;: Friday, February 24, 2017&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Time, Session&lt;/em&gt;&lt;/strong&gt;: 2:45 pm - 3:15 pm, Session 8 Quantum optics theory&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Title&lt;/em&gt;&lt;/strong&gt;: Spin squeezing on nanophotonic waveguides&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Authors&lt;/em&gt;&lt;/strong&gt;: Xiaodong Qi, Jongmin Lee, Yuan-Yu Jau, and Ivan H. Deutsch&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Abstract&lt;/em&gt;&lt;/strong&gt;: Strong coupling between atoms and photons is a prerequisite for quantum information processing protocols ranging from quantum metrology to quantum communication and computation. This strong coupling effect can be achieved using nanophotonic waveguides whereby an ensemble of atoms are trapped in the evanescent field. In this talk, I will present our recent progress in the theoretical study of implementing spin squeezing using optical nanofibers (ONF) and square waveguides (SWG) with both birefringence and Faraday interactions as QND measurement. Various geometries of protocols will be discussed based on the analysis of optical depth per atom on ONF and SWG platforms. In calculating the spin squeezing parameter, we have established a set of stochastic master equations to describe the individual and collective spin dynamics. Our simulation shows that ~10 dB of spin squeezing can be reached with a few thousands of atoms on these nanophotonic waveguides. Using the fundamental TE and TM modes, the SWG could generate more spin squeezing compared to the ONF platform. Our result can be generalized to other nanophotonic platforms, for the implementation of non-Gaussian states, and to improve quantum sensing precision using spin squeezing techniques.&lt;/p&gt;
&lt;p&gt;Files can be downloaded from the &lt;a href=&quot;https://github.com/i2000s/2017SQuInT-SpinSqueezingOnNanophotonicWaveguides/releases&quot;&gt;repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feel free to comment as an &lt;a href=&quot;https://github.com/i2000s/2017SQuInT-SpinSqueezingOnNanophotonicWaveguides/issues&quot;&gt;issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Cite: &lt;a href=&quot;https://doi.org/10.5281/zenodo.802696&quot;&gt;&lt;img src=&quot;https://zenodo.org/badge/DOI/10.5281/zenodo.802696.svg&quot; alt=&quot;DOI&quot; /&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;references&quot;&gt;

&lt;/div&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2016/12/16/squint-2017-talk.html</link>
          <pubDate>Fri, 16 Dec 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2016/12/16/squint-2017-talk.html</guid>
        </item>
   
        <item>
          <title>Put everything on a quantum circuit--part I</title>
          <description>&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;/h2&gt;
&lt;p&gt;This series of notes is initially written for &lt;a href=&quot;https://github.com/amitjamadagni&quot;&gt;Amit Jamadagni&lt;/a&gt; and &lt;a href=&quot;https://github.com/Roger-luo&quot;&gt;Xiuzhe Luo&lt;/a&gt; who have been working on the &lt;a href=&quot;https://juliaquantum.github.io&quot;&gt;JuliaQuantum organization&lt;/a&gt;’s &lt;a href=&quot;https://github.com/JuliaQuantum/QuBase.jl&quot;&gt;Base.jl&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaQuantum/QuDynamics.jl&quot;&gt;QuDynamics.jl&lt;/a&gt; and &lt;a href=&quot;https://github.com/JuliaQuantum/QuCmp.jl&quot;&gt;QuCmp.jl&lt;/a&gt; projects individually. Amit has put intensive efforts on framing out the basic &lt;a href=&quot;https://julialang.org&quot;&gt;Julia&lt;/a&gt; libraries on basic quantum type system, the time evolution of quantum systems and the idea of propagators. Xiuzhe as a junior undergraduate physics student just started the QuCmp.jl project to build some fundamental Julia libraries for quantum computing (adiabatic quantum computing, quantum circuit model and others). I try to outline in the notes some theoretical foundations on quantum dynamics (especially for open quantum systems) and its link to simulating quantum computing models (especially on the circuit model) with the hope to conclude the following points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To reach out the regime of more complicated scenarios to simulate general quantum systems beyond what Amit have done, it would be great to have the stochastic differential equations and their solvers established.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To be widely useful and efficient, it may be better to reframe the type system on top of operator and superoperator language&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;. It could be easier to start with the complete positive mapping case where the methods and theory have been well established.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All of the current projects are depending on each other on different levels, and hence developers should know how JuliaQuantum projects are connected in a big picture and work together. That will make the organization and its projects long-lasting and attractive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are a lot to look forward to in building the JuliaQuantum libraries. Once the operator/superoperator type system established, the stochastic equation solves will be easier to implement; once that is done, quantum metrology, tomography and control which usually involve stochastic processes instead of deterministic time-evolution processes will be possible to simulate using the basic packages, and packages for these applications can be developed; the quantum computing package–especially the universal quantum circuit simulation module–is one aspect of those applications as well as the foundation for designing and controlling future quantum computers, the high-performance and generality of which could attract people to join us to develop more useful tools and devices even after the quantum computing times burst.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wish this series of notes could be helpful in sketching a big and inspiring picture in the readers’ mind, instead of trapping their mind into some niches. It may be helpful for other audience. Please leave your comments if you find it helpful or have other thoughts.&lt;/p&gt;
&lt;h2 id=&quot;a-normal-time-evolution-instance-you-may-have-studied&quot;&gt;A normal time-evolution instance you may have studied&lt;/h2&gt;
&lt;p&gt;Let us begin with a simple example: an atomic ensemble interacts with a quantum bath which could be a magnetic field or ideal single photon sources. The time evolution of the density operator may be described by the following differential map &lt;span class=&quot;math&quot;&gt;\[\begin{equation}\label{eq:drhot}
\hat{\rho}(t+dt) = \hat{M}_0(dt)\hat{\rho}(t)\hat{M}^\dagger_0(dt) +
\sum_{\mu&amp;gt;0} \hat{M}_\mu (dt)\hat{\rho}(t)\hat{M}^\dagger(dt)
\end{equation}\]&lt;/span&gt; where the self-evolution operator in the time slot &lt;span class=&quot;math&quot;&gt;\(dt\)&lt;/span&gt; is given by &lt;span class=&quot;math&quot;&gt;\(\hat{M}_0(dt)=\hat{\mathbb{1}}-\frac{i}{\hbar}\hat{H}_{eff}dt\)&lt;/span&gt; with the effective Hamiltonian &lt;span class=&quot;math&quot;&gt;\(\hat{H}_{eff}=\hat{H}-\frac{i\hbar}{2}\sum_\mu \hat{L}_\mu^\dagger \hat{L}_\mu\)&lt;/span&gt;. The system Hamiltonian &lt;span class=&quot;math&quot;&gt;\(\hat{H}\)&lt;/span&gt; can be arbitrary yet Hermitian. It defines how the system processes without interacting with environment and its energy spectrum (levels). If we consider a spin-&lt;span class=&quot;math&quot;&gt;\(1/2\)&lt;/span&gt; system in the z-basis, a simple free-processing Hamiltonian could be &lt;span class=&quot;math&quot;&gt;\[\begin{align}
\hat{H} &amp;amp;= \left( \matrix{E_+ &amp;amp; 0 \\ 0 &amp;amp; E_-}\right),
\end{align}\]&lt;/span&gt; where &lt;span class=&quot;math&quot;&gt;\(E_+\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(E_-\)&lt;/span&gt; are the two energy levels. Obviously, it can be rewritten using the Pauli operators.&lt;/p&gt;
&lt;p&gt;The so-called jump operators &lt;span class=&quot;math&quot;&gt;\(\hat{L}_\mu\)&lt;/span&gt; define how the system will evolve in each measurement basis &lt;span class=&quot;math&quot;&gt;\(\mu\)&lt;/span&gt;. A quantum state will be evolved into &lt;span class=&quot;math&quot;&gt;\[\begin{align}
\ket{\Psi(t+dt)} &amp;amp;= \hat{L}_\mu(dt) \ket{\Psi(t)}
\end{align}\]&lt;/span&gt; if only considering the single jump operator &lt;span class=&quot;math&quot;&gt;\(\hat{L}_\mu\)&lt;/span&gt; applied in a small period of time, &lt;span class=&quot;math&quot;&gt;\(dt\)&lt;/span&gt;. We call &lt;span class=&quot;math&quot;&gt;\(\hat{L}_\mu\)&lt;/span&gt; a jump operator because it projects the quantum state towards some eigenstate of the operator randomly. For example, we could let $ &lt;em&gt;i = &lt;/em&gt;z $ for a spin-&lt;span class=&quot;math&quot;&gt;\(1/2\)&lt;/span&gt; system, which means &lt;span class=&quot;math&quot;&gt;\(\hat{L}_i\)&lt;/span&gt; will tend to project the system onto one of its eigenstate for spin number &lt;span class=&quot;math&quot;&gt;\(\pm \frac{1}{2}\)&lt;/span&gt; in the z-basis. To give a concrete sense of physics, this type of jump operators could corresponding to a magnetic field interaction–the one as we know in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Stern%E2%80%93Gerlach_experiment&quot;&gt;Stern-Gerlach experiment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We can formally define a set of Krause operators &lt;span class=&quot;math&quot;&gt;\[\begin{align}
\hat{M}_\mu &amp;amp;= \hat{L}_\mu \sqrt{dt},\quad \mu=1,\cdots,m.
\end{align}\]&lt;/span&gt; Notice that each &lt;span class=&quot;math&quot;&gt;\(\hat{M}_\mu\)&lt;/span&gt; is on the order of &lt;span class=&quot;math&quot;&gt;\(\sqrt{dt}\)&lt;/span&gt; which makes the Krause operator a second-order effect on the evolution of the system. We define the Krause operators in this way is based on the fact that the measurement operators &lt;span class=&quot;math&quot;&gt;\(\hat{E}_\mu\)&lt;/span&gt; and the probability of finding the output on the &lt;span class=&quot;math&quot;&gt;\(\mu\)&lt;/span&gt; channel &lt;span class=&quot;math&quot;&gt;\(p_\mu\)&lt;/span&gt; should be &lt;span class=&quot;math&quot;&gt;\[\begin{align}
\hat{E}_\mu &amp;amp;= \hat{M}^\dagger_\mu\hat{M}_\mu \\
p_\mu &amp;amp;= \tr\left( \hat{\rho}\hat{E}_\mu\right) \label{eq:jumppmu}
\end{align}\]&lt;/span&gt; which are incremental over &lt;span class=&quot;math&quot;&gt;\(dt\)&lt;/span&gt; time slots. The post-measurement state can therefore be written as &lt;span class=&quot;math&quot;&gt;\[\begin{align}\label{eq:rhodt}
\hat{\rho}_\mu = \frac{\hat{M}_\mu\hat{\rho}\hat{M}^\dagger_\mu}{p_\mu}.
\end{align}\]&lt;/span&gt; For a pure state &lt;span class=&quot;math&quot;&gt;\(\hat{\rho}=\ketbra{\Psi}{\Psi}\)&lt;/span&gt;&lt;a href=&quot;#fn2&quot; class=&quot;footnoteRef&quot; id=&quot;fnref2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;, &lt;span class=&quot;math&quot;&gt;\[\begin{align} \label{eq:Psidt}
\ket{\Psi(t+dt)}_\mu = \frac{\hat{M}_\mu\ket{\Psi(t)}}{\sqrt{p_\mu}} = \frac{\hat{L}_\mu\ket{\Psi(t)}}{ \abs{\hat{L}_\mu\ket{\Psi(t)}} }.
\end{align}\]&lt;/span&gt; Eq.&lt;span class=&quot;math&quot;&gt;\(\eqref{eq:Psidt}\)&lt;/span&gt; may look more familiar than Eq.&lt;span class=&quot;math&quot;&gt;\(\eqref{eq:rhodt}\)&lt;/span&gt; as the former one is commonly used to describe Born’s rules on quantum measurements.&lt;/p&gt;
&lt;p&gt;If we look at Eqs.&lt;span class=&quot;math&quot;&gt;\(\eqref{eq:Psidt}\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(\eqref{eq:rhodt}\)&lt;/span&gt; more closely, we will find that both has been used in defining the algorithms of &lt;strong&gt;&lt;em&gt;quantum diffusion Monte Carlo&lt;/em&gt;&lt;/strong&gt; (QDMC) or &lt;strong&gt;&lt;em&gt;quantum wavefunction Monte Carlo&lt;/em&gt;&lt;/strong&gt; (QWFMC) method&lt;a href=&quot;#Dum1992Monte&quot;&gt; [1,2,3,4]&lt;/a&gt;. The &lt;span class=&quot;math&quot;&gt;\(\hat{L}_\mu\)&lt;/span&gt; operator indeed defines the random quantum jumps in the algorithm with a jump probability defined in Eq.&lt;span class=&quot;math&quot;&gt;\(\eqref{eq:jumppmu}\)&lt;/span&gt;! Each jump will lead to a new quantum trajectory and &lt;em&gt;diffuse&lt;/em&gt; the quantum states over time.&lt;/p&gt;
&lt;p&gt;Further more, if we rewrite Eq.&lt;span class=&quot;math&quot;&gt;\(\eqref{eq:drhot}\)&lt;/span&gt; in the form of an ordinary differential equation, we have obtain &lt;span class=&quot;math&quot;&gt;\[\begin{align} \label{eq:lindblad}
\dd{\rho}{t} &amp;amp;= -\frac{i}{\hbar} \left[ \hat{H},\hat{\rho}\right]-\frac{1}{2}\sum_{\mu=1}^m \left( \hat{L}_\mu^\dagger\hat{L}_\mu\hat{\rho}+\hat{\rho}\hat{L}^\dagger_\mu\hat{L}_\mu-2\hat{L}_\mu\hat{\rho}\hat{L}^\dagger_\mu \right).
\end{align}\]&lt;/span&gt; This is the famous &lt;em&gt;Lindblad&lt;/em&gt; form of the &lt;strong&gt;&lt;em&gt;quantum master equation&lt;/em&gt;&lt;/strong&gt; for an open system! In many textbooks, the Lindblad equation can also be formally simplified by defining a superoperator &lt;span class=&quot;math&quot;&gt;\(\mathcal{D}[\cdot]\)&lt;/span&gt; via &lt;span class=&quot;math&quot;&gt;\[\begin{equation}
\mathcal{D}[\hat{\rho}] = -\frac{i}{\hbar} \left[ \hat{H},\hat{\rho}\right]-\frac{1}{2}\sum_{\mu=1}^m \left( \hat{L}_\mu^\dagger\hat{L}_\mu\hat{\rho}+\hat{\rho}\hat{L}^\dagger_\mu\hat{L}_\mu-2\hat{L}_\mu\hat{\rho}\hat{L}^\dagger_\mu \right)
\end{equation}\]&lt;/span&gt; so that &lt;span class=&quot;math&quot;&gt;\(\dd{\hat{\rho}}{t}=\mathcal{D}[\hat{\rho}]\)&lt;/span&gt; describes a dissipative process in a neat form. In the mean time, the jump operators &lt;span class=&quot;math&quot;&gt;\(\hat{L}_\mu\)&lt;/span&gt; could also be called in many places the Lindblad operators if they yields the POVMs as defined earlier.&lt;/p&gt;
&lt;p&gt;Just a note on side: the measurement operator defined earlier is usually called POVMs (postive-valued measurements) if the eigenvalues are not negative corresponding to physical projection measurement outputs. In research, finding an optimal set of measurements to retrieve the maximum information of the quantum state of a system with minimal times of measurements has been a hot topic and leads to the field of quantum tomography, compressed sensing and related algorithms.&lt;/p&gt;
&lt;h2 id=&quot;a-second-look-on-the-quantum-trajectories-using-stochastic-calculus-language&quot;&gt;A second look on the quantum trajectories using stochastic calculus language&lt;/h2&gt;
&lt;p&gt;Above, we have described the system-environment interaction as a process of random quantum measurements. In the cases we have studied, we treat the environmental disturb as statistically identical sources over time–to some extent, the jump probability distribution has to be identical for each jump step to be able to directly apply the pure time-differential equations we have derived earlier. Let us take a closer look on its statistic nature in the language of stochastic calculus&lt;a href=&quot;#Gardiner1985Handbook&quot;&gt; [5]&lt;/a&gt;&lt;a href=&quot;#fn3&quot; class=&quot;footnoteRef&quot; id=&quot;fnref3&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
For simplicity, we will stick to a given state &lt;span class=&quot;math&quot;&gt;\(\ket{\Psi(t)}\)&lt;/span&gt;. We define a random variable–a stochastic interval &lt;span class=&quot;math&quot;&gt;\(dN_\mu(t)\)&lt;/span&gt;–Poisson distributed with values
&lt;div&gt;
&lt;span class=&quot;math&quot;&gt;\[\begin{equation}\label{eq:dNmudistr}
dN_\mu(t) = \left\{
  \begin{array}
  \\1 , &amp;amp; \text{with probability } p_\mu \\
  0, &amp;amp; \text{with probability } 1-p_\mu.
  \end{array}\right.
\end{equation}\]&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;It satisfies the properties based on the rule of stochastic calculus that &lt;span class=&quot;math&quot;&gt;\[\begin{align}
\sum_{\mu=0}^m dN_\mu(t) &amp;amp;=1,\label{eq:sumdNmu}\\
dN_\mu(t)dN_\nu (t) &amp;amp;= \delta_{\mu\nu} dN_\mu(t),\\
\text{expectation value } \langle dN_\mu (t)\rangle &amp;amp;= p_\mu = \bra{\Psi(t)} \hat{L}^\dagger_\mu \hat{L}_\mu \ket{\Psi(t)}dt.
\end{align}\]&lt;/span&gt; Then based on the physical meaning, we can rewrite an unnormalized form of the evolved state by &lt;span class=&quot;math&quot;&gt;\[\begin{align}
\ket{\tilde{\Psi}(t+dt)} &amp;amp;= dN_0(t)\hat{M}_0\ket{\Psi(t)} + \sum_{\mu=1}^m dN_\mu (t)\hat{L}_\mu \ket{\Psi(t)}.
\end{align}\]&lt;/span&gt; We use the property of the stochastic internal &lt;span class=&quot;math&quot;&gt;\(dN_\mu(t)\)&lt;/span&gt; to replace &lt;span class=&quot;math&quot;&gt;\(dN_0(t)=1-\sum_{\mu=1}^m dN_\mu\)&lt;/span&gt;, and obtain &lt;span class=&quot;math&quot;&gt;\[\begin{align}
\ket{\tilde{\Psi}(t+dt)} &amp;amp;= \hat{M}_0\ket{\Psi(t)} + \sum_{\mu=1}^m dN_\mu (t) (\hat{L}_\mu -\hat{M}_0) \ket{\Psi(t)}\\
&amp;amp;= (\mathbb{1} - \frac{i}{\hbar}\hat{H}_{eff}dt)\ket{\Psi(t)} + \sum_{\mu=1}^m dN_\mu (\hat{L}_\mu - \mathbb{1} + \frac{i}{\hbar}\hat{H}_{eff}dt)\ket{\Psi(t)}.
\end{align}\]&lt;/span&gt; We ignore the terms that have an order higher than &lt;span class=&quot;math&quot;&gt;\(dt\)&lt;/span&gt; according to the rules of stochastic calculus, that is to let &lt;span class=&quot;math&quot;&gt;\(dN_\mu (t)dt \sim \sqrt{dt}dt=0\)&lt;/span&gt;, and obtain the unnormalized state update equation &lt;span class=&quot;math&quot;&gt;\[\begin{align}
d\ket{\tilde{\Psi}} &amp;amp;\equiv \ket{\tilde{\Psi}(t+dt)} - \ket{\Psi(t)}\\
&amp;amp;= -\frac{i}{\hbar} \hat{H}_{eff}dt\ket{\Psi} + \sum_{\mu=1}^m dN_\mu(t)(\hat{L}_\mu-1)\ket{\Psi}.
\end{align}\]&lt;/span&gt; This is the unnormalized &lt;strong&gt;&lt;em&gt;stochastic Schrodinger equation&lt;/em&gt;&lt;/strong&gt; (SSE) for a jump update. Alternatively, in the normalized form, the SSE becomes &lt;span class=&quot;math&quot;&gt;\[\begin{align}\label{eq:SSE}
d\ket{\Psi} &amp;amp;= \left( -\frac{i}{\hbar}\hat{H}_{eff} + \frac{1}{2}\sum_{\mu=1}^m \langle \hat{L}^\dagger_\mu \hat{L}_\mu \rangle \right) dt\ket{\Psi} + \sum_{\mu=1}^m dN_\mu(t) \left( \frac{\hat{L}_\mu}{\sqrt{\langle \hat{L}^\dagger_\mu \hat{L}_\mu\rangle }}-1\right)\ket{\Psi}.
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;By using the definition that the density operator is the ensemble average, &lt;span class=&quot;math&quot;&gt;\(\hat{\rho}(t+dt)=\bar{\ketbra{\Psi(t+dt)}{\Psi(t+dt)}}\)&lt;/span&gt; and only keep terms up to the order of &lt;span class=&quot;math&quot;&gt;\(dt\)&lt;/span&gt;, it is trivial to show that the Lindblad equation (Eq.&lt;span class=&quot;math&quot;&gt;\(\eqref{eq:lindblad}\)&lt;/span&gt;) is equivalent to the SSE.&lt;/p&gt;
&lt;p&gt;There are two important properties of the SSEs, Lindblad equations and &lt;span class=&quot;math&quot;&gt;\(dN(t)\)&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The SSEs and Lindblad master equations in general are unlike the normal Schrodinger equation, and could be nonlinear due to the fact that &lt;span class=&quot;math&quot;&gt;\(dN_\mu(t)\)&lt;/span&gt; could depend on the state of &lt;span class=&quot;math&quot;&gt;\(\Psi(t)\)&lt;/span&gt; at each time step&lt;a href=&quot;#fn4&quot; class=&quot;footnoteRef&quot; id=&quot;fnref4&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In our case, &lt;span class=&quot;math&quot;&gt;\(dN(t)\)&lt;/span&gt; obeys the Poisson distribution. It means that, in every jump of the quantum trajectory, the jump statistics will be the same as the previous step, and the process of determining which trajectory to jump can be mapped to the “toss of a coin” problem–whether the result is a “head” or “tail” for every toss is predefined as independent identical instances with a uniform random distribution. This is a typical Markov chain process that the “toss of coin” doesn’t have a memory with the previous step, or physically you might want to regard this process as being jumping in steps slower than the dissipative or equilibrium process (&lt;span class=&quot;math&quot;&gt;\(\delta t \gg 1/\gamma\)&lt;/span&gt;). Lindblad equations with a simple time-homogeneous evolution only works for Markovian processes with simple random sampling properties.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In similar cases, one can use different Lindblad operators to describe the quantum dynamics with the same form of Lindblad equations as shown in Eq.&lt;span class=&quot;math&quot;&gt;\(\eqref{eq:lindblad}\)&lt;/span&gt;. Commonly, the &lt;em&gt;relaxation&lt;/em&gt; process of a quantum system in presence of a reservoir can be described by the Lindblad superoperator &lt;span class=&quot;math&quot;&gt;\[\begin{align}
\mathcal{L}[\hat{\rho}] &amp;amp;= -\frac{1}{2}\sum_{\mu=1} \left( \hat{L}_\mu^\dagger\hat{L}_\mu\hat{\rho}+\hat{\rho}\hat{L}^\dagger_\mu\hat{L}_\mu-2\hat{L}_\mu\hat{\rho}\hat{L}^\dagger_\mu \right)\\
&amp;amp;= \frac{1}{2}\sum_{\mu=1}\left[\hat{L}_\mu,\left[\hat{\rho}, \hat{L}_\mu \right] \right].
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;all-can-be-extended-to-more-complicated-cases-with-a-small-tweak&quot;&gt;All can be extended to more complicated cases with a small tweak&lt;/h2&gt;
&lt;p&gt;We can briefly take a look on how this formalism can be extended to other cases and find the correct Lindblad operators–yes, find a proper Lindblad operator is the only modification without changing the form of equations for some cases. For example, in a homodyne detection case&lt;a href=&quot;#Wiseman1993Interpretation&quot;&gt; [6]&lt;/a&gt;, a beam splitter is used to branch out two signal paths for the final measurement; a local oscillator, which could be a coherent laser beam locked at the same frequency as the input signal on the other branch of the beam splitter as shown in the figure below. For a balanced beam splitter, the two output branches yield the combined and subtracted signals in detection, which are the &lt;span class=&quot;math&quot;&gt;\(\hat{X}\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(\hat{P}\)&lt;/span&gt; quadratures in the phase plane.&lt;/p&gt;
&lt;center&gt;
 
&lt;figure&gt;
&lt;img src=&quot;/en/assets/img/homodyneheterodyne_beamsplitter.svg&quot; alt=&quot;Fig 1. Beam splitter for homodyne and heterodyne detections.&quot; /&gt;&lt;figcaption&gt;Fig 1. Beam splitter for homodyne and heterodyne detections.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;br&gt; &lt;br&gt;
&lt;/center&gt;

&lt;p&gt;By treating the local oscillator as a coherent light with a large amplitude &lt;span class=&quot;math&quot;&gt;\(\alpha\)&lt;/span&gt; (related to the averge phone flux with a phase factor), the input-output relationship of the beam splitter can be given by &lt;span class=&quot;math&quot;&gt;\[\begin{align}
\hat{a}_\pm &amp;amp;= \frac{\alpha\hat{\mathbb{1}} \pm \hat{a}}{\sqrt{2}}.
\end{align}\]&lt;/span&gt; Assuming the other part of the quantum system is the same as before and the signal has &lt;span class=&quot;math&quot;&gt;\(\mu=1,\cdots,m\)&lt;/span&gt; modes, the Lindblad operators can be written as &lt;span class=&quot;math&quot;&gt;\(\hat{J}_{\mu,\pm} = \frac{A_\mu \hat{\mathbb{1}}\pm \hat{L}_\mu}{\sqrt{2}}\)&lt;/span&gt;, where &lt;span class=&quot;math&quot;&gt;\(A_\mu\)&lt;/span&gt; is a complex constant. After some algebra, the Krause operators of the homodyne case can also be defined as a linear transformation of the previous Krause operators: &lt;span class=&quot;math&quot;&gt;\[\begin{align}
\left(\begin{array}{c} \hat{K}_0\\ \hat{K}_{\mu,+} \\ \hat{K}_{\mu,-}\end{array}\right)
&amp;amp;= \left[ \begin{array}{ccc}
1-\frac{1}{2}|A_\mu|^2dt &amp;amp; 0 &amp;amp; A_\mu \sqrt{\frac{dt}{2}}\\
A_\mu\sqrt{\frac{dt}{2}} &amp;amp; \frac{1}{\sqrt{2}} &amp;amp; \frac{1-\frac{1}{2}|A_\mu|^2dt}{\sqrt{2}}\\
A_\mu\sqrt{2} &amp;amp; -\frac{1}{\sqrt{2}} &amp;amp; \frac{1-\frac{1}{2}|A_\mu|^2dt}{\sqrt{2}}
\end{array}\right]
\left(\begin{array}{c} \hat{M}_0 \\ \hat{M}_\mu \\ 0 \end{array}\right).
\end{align}\]&lt;/span&gt; The form of Lindblad eqution and the stochastic Schrodinger equation will be the same as before&lt;a href=&quot;#Wiseman1993Interpretation&quot;&gt; [6]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You may ask could the sampling process have any statistical distribution types other than the uniform random distribution? Indeed, the stochastic interval &lt;span class=&quot;math&quot;&gt;\(dN_\mu(t)\)&lt;/span&gt; can have different statistical distribution modes. In either homodyne or heterodyne measurements with a local oscillator at a frequency the same as or different from the signal merged at a beam splitter&lt;a href=&quot;#Wiseman1993Interpretation&quot;&gt; [6]&lt;/a&gt;, the local oscillator injects noise to the measurement result and affects the quantum dynamics in the process of continuous measurements. Roughly speaking, we may be able to formally rewrite the stochastic interval in the following form, &lt;span class=&quot;math&quot;&gt;\[\begin{equation}
dN_\mu (t) = &amp;lt;dN_\mu(t)&amp;gt; + \sigma_\mu \delta W_\mu(t),
\end{equation}\]&lt;/span&gt; where the first part &lt;span class=&quot;math&quot;&gt;\(&amp;lt;dN_\mu(t)&amp;gt;\)&lt;/span&gt; is the mean value of stochastic interval, &lt;span class=&quot;math&quot;&gt;\(\sigma_\mu\)&lt;/span&gt; is the variance, and &lt;span class=&quot;math&quot;&gt;\(\delta W_\mu(t)\)&lt;/span&gt; is the Weiner stochastic variable. In our case, &lt;span class=&quot;math&quot;&gt;\(&amp;lt;dN_\mu(t)&amp;gt;\)&lt;/span&gt; is proportional to the intensity of the input modes, and the variance of the signals can be determined by the square root of the photon number in the interaction time interval for a coherent light. Given a relatively strong local oscillator, the noise generated obeys the central limit law and will be a Gaussian noise. Therefore, &lt;span class=&quot;math&quot;&gt;\(\delta W_\mu(t)\)&lt;/span&gt; will be a Brownian diffusion random variable in a Gaussian distribution which gives a white noise. Later, we will use &lt;span class=&quot;math&quot;&gt;\(dW(t)\)&lt;/span&gt; to characterize the stochastic process for the normalized stochastic variable with various distribution modes. We will see the stochastic viable will eventually extend the commonly seen time-homogeneous quantum evolution to a broader spectrum of scenarios in the next part of the notes.&lt;/p&gt;
&lt;p&gt;If you want to modify a quantum dynamics simulation code–either using Monte Carlo method or other algorithms–which only involves homogeneously distributed random variable to a general stochastic processes, what you need to do is to bring in a stochastic variable &lt;span class=&quot;math&quot;&gt;\(dW(t)\)&lt;/span&gt; with other statistical distributions and find a proper integration method to solve the differential equations. Using the homodyne detection case, for instance, you can define &lt;span class=&quot;math&quot;&gt;\(dt\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(dW(t)\)&lt;/span&gt; in a time list &lt;span class=&quot;math&quot;&gt;\(t\)&lt;/span&gt; as below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In [1]:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;sourceCode julia&quot;&gt;&lt;code class=&quot;sourceCode julia&quot;&gt;tmin = &lt;span class=&quot;fl&quot;&gt;0&lt;/span&gt;.;
tmax = &lt;span class=&quot;fl&quot;&gt;10.0&lt;/span&gt;;
step = &lt;span class=&quot;fl&quot;&gt;100&lt;/span&gt;;
t = linspace(tmin,tmax,step);
dt = t[&lt;span class=&quot;fl&quot;&gt;2&lt;/span&gt;]-t[&lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;];
dW = randn(step).*dt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The variable &lt;code&gt;dW&lt;/code&gt; is now a list of Gaussian/normally distributed numbers with mean &lt;span class=&quot;math&quot;&gt;\(0\)&lt;/span&gt; and standard deviation &lt;span class=&quot;math&quot;&gt;\(1\)&lt;/span&gt; with the same length as &lt;code&gt;t&lt;/code&gt;, and &lt;code&gt;dt&lt;/code&gt; is a constant for all time steps. Easy peasy, right?&lt;/p&gt;
&lt;h2 id=&quot;wrap-up-for-this-part&quot;&gt;Wrap up for this part&lt;/h2&gt;
&lt;p&gt;In this part of notes, we have revisited the quantum dynamics problems that has been widely taught in undergraduate level quantum mechanics classes but in a stochastic process perspective in the end. In general, the stochastic process reflects one important nature of quantum systems and will lead to a rich church of differential equations that our JuliaQuantum libraries would want to include, and I will illustrate more on their forms in the next part. The leftover practical task for solving stochastic equations is to implementing various solvers or integrating algorithms. There are two well-known stochastic integrals–&lt;a href=&quot;https://en.wikipedia.org/wiki/It%C3%B4_calculus&quot;&gt;Itô integral&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Stratonovich_integral&quot;&gt;Stratonovich integral&lt;/a&gt;. More details of the general form of stochastic differential equations and integration methods can be found in &lt;a href=&quot;#Gardiner2004Quantum&quot;&gt; [7]&lt;/a&gt; and other modern books. I will not write too much on those details, but rather give you a big picture on the connected fields.&lt;/p&gt;
&lt;p&gt;On the other hand, quantum simulation packages like the &lt;em&gt;Quantum Optics Toolbox in Matlab&lt;/em&gt;&lt;a href=&quot;#Tan1999Computational&quot;&gt; [8]&lt;/a&gt; and its Python version &lt;em&gt;QuTiP&lt;/em&gt;&lt;a href=&quot;#Johansson2013Qutip&quot;&gt; [9]&lt;/a&gt; becomes widely used while the input quantities can be classified into a few object classes is mainly due to the mathematical fact that the quantum dynamics equations and quantum systems those toolboxes can simulate all have nice mathematical structures. For example, a lot of quantum dynamics problems can be described by the Lindblad form of master equations, which in the end is completely positive maps (CP-maps) and can be fully characterized by the hierarchy of complete positive operators and superoperators as mathematical objects&lt;a href=&quot;#fn5&quot; class=&quot;footnoteRef&quot; id=&quot;fnref5&quot;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;. To my perspective, the existing JuliaQuantum libraries can be improved by extending its representation types to the operator and superoperator system and build more general solvers to cover the stochastic equations, and we can make better program libraries with in-depth mathematical insights and high-performance programming language. I will also touch the base of some mathematical fundation in the next part.&lt;/p&gt;
&lt;p&gt;With the basic stochastic language introduced, we are ready to explore more complicated differential equations and start appreciating the nature of quantum measurements and how all of these can be connected to the quantum circuit model. Content is mainly based on my hand-written lecture notes taught by my supervisor &lt;a href=&quot;https://cquic.unm.edu/deutsch-group/&quot;&gt;Ivan Deutsch&lt;/a&gt; and my daily journals on reading, meeting and playing. I hope the following notes can help understand those content intuitively.&lt;/p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul class=&quot;referencelist&quot;&gt;
&lt;ol class=&quot;bibliography&quot; reversed=&quot;reversed&quot;&gt;&lt;li&gt;&lt;!----&gt;
&lt;div id=&quot;Dum1992Monte-materials&quot;&gt;
&lt;ul class=&quot;nav nav-pills&quot; style=&quot;margin-top:0px;padding-top:2px;padding-bottom:2px;&quot;&gt;
&lt;li&gt;
&lt;span id=&quot;Dum1992Monte&quot;&gt;[1] R. Dum, A. S. Parkins, P. Zoller, and C. W. Gardiner, Physical Review A &lt;b&gt;46&lt;/b&gt;, 4382 (1992).&lt;/span&gt;
&lt;/li&gt;




&lt;/ul&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;!----&gt;
&lt;div id=&quot;Molmer1993Monte-materials&quot;&gt;
&lt;ul class=&quot;nav nav-pills&quot; style=&quot;margin-top:0px;padding-top:2px;padding-bottom:2px;&quot;&gt;
&lt;li&gt;
&lt;span id=&quot;Molmer1993Monte&quot;&gt;[2] K. Mølmer, Y. Castin, and J. Dalibard, JOSA B &lt;b&gt;10&lt;/b&gt;, 524 (1993).&lt;/span&gt;
&lt;/li&gt;




&lt;/ul&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;!----&gt;
&lt;div id=&quot;Molmer1996Monte-materials&quot;&gt;
&lt;ul class=&quot;nav nav-pills&quot; style=&quot;margin-top:0px;padding-top:2px;padding-bottom:2px;&quot;&gt;
&lt;li&gt;
&lt;span id=&quot;Molmer1996Monte&quot;&gt;[3] K. Mølmer and Y. Castin, Quantum and Semiclassical Optics: Journal of the European Optical Society Part B &lt;b&gt;8&lt;/b&gt;, 49 (1996).&lt;/span&gt;
&lt;/li&gt;




&lt;/ul&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;!----&gt;
&lt;div id=&quot;Plenio1998Quantum-materials&quot;&gt;
&lt;ul class=&quot;nav nav-pills&quot; style=&quot;margin-top:0px;padding-top:2px;padding-bottom:2px;&quot;&gt;
&lt;li&gt;
&lt;span id=&quot;Plenio1998Quantum&quot;&gt;[4] M. B. Plenio and P. L. Knight, Reviews of Modern Physics &lt;b&gt;70&lt;/b&gt;, 101 (1998).&lt;/span&gt;
&lt;/li&gt;




&lt;/ul&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;!----&gt;
&lt;div id=&quot;Gardiner1985Handbook-materials&quot;&gt;
&lt;ul class=&quot;nav nav-pills&quot; style=&quot;margin-top:0px;padding-top:2px;padding-bottom:2px;&quot;&gt;
&lt;li&gt;
&lt;span id=&quot;Gardiner1985Handbook&quot;&gt;[5] C. W. Gardiner, &lt;i&gt;Handbook of Stochastic Methods&lt;/i&gt;, 2nd ed. (Springer Berlin, 1985).&lt;/span&gt;
&lt;/li&gt;




&lt;/ul&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;!----&gt;
&lt;div id=&quot;Wiseman1993Interpretation-materials&quot;&gt;
&lt;ul class=&quot;nav nav-pills&quot; style=&quot;margin-top:0px;padding-top:2px;padding-bottom:2px;&quot;&gt;
&lt;li&gt;
&lt;span id=&quot;Wiseman1993Interpretation&quot;&gt;[6] H. M. Wiseman and G. J. Milburn, Phys. Rev. A &lt;b&gt;47&lt;/b&gt;, 1652 (1993).&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;a style=&quot;margin-top:-10px;padding-top=0px;padding-bottom:0px;&quot; href=&quot;https://dx.doi.org/10.1103/PhysRevA.47.1652&quot; target=&quot;_blank&quot;&gt;Link&lt;/a&gt;
&lt;/li&gt;



&lt;/ul&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;!----&gt;
&lt;div id=&quot;Gardiner2004Quantum-materials&quot;&gt;
&lt;ul class=&quot;nav nav-pills&quot; style=&quot;margin-top:0px;padding-top:2px;padding-bottom:2px;&quot;&gt;
&lt;li&gt;
&lt;span id=&quot;Gardiner2004Quantum&quot;&gt;[7] C. Gardiner and P. Zoller, &lt;i&gt;Quantum Noise: a Handbook of Markovian and Non-Markovian Quantum Stochastic Methods with Applications to Quantum Optics&lt;/i&gt; (Springer Science &amp;amp; Business Media, 2004).&lt;/span&gt;
&lt;/li&gt;




&lt;/ul&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;!----&gt;
&lt;div id=&quot;Tan1999Computational-materials&quot;&gt;
&lt;ul class=&quot;nav nav-pills&quot; style=&quot;margin-top:0px;padding-top:2px;padding-bottom:2px;&quot;&gt;
&lt;li&gt;
&lt;span id=&quot;Tan1999Computational&quot;&gt;[8] S. M. Tan, Journal of Optics B: Quantum and Semiclassical Optics &lt;b&gt;1&lt;/b&gt;, 424 (1999).&lt;/span&gt;
&lt;/li&gt;




&lt;/ul&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;!----&gt;
&lt;div id=&quot;Johansson2013Qutip-materials&quot;&gt;
&lt;ul class=&quot;nav nav-pills&quot; style=&quot;margin-top:0px;padding-top:2px;padding-bottom:2px;&quot;&gt;
&lt;li&gt;
&lt;span id=&quot;Johansson2013Qutip&quot;&gt;[9] J. R. Johansson, P. D. Nation, and F. Nori, Computer Physics Communications &lt;b&gt;184&lt;/b&gt;, 1234 (2013).&lt;/span&gt;
&lt;/li&gt;




&lt;/ul&gt;

&lt;/div&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;/ul&gt;

&lt;div class=&quot;references&quot;&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;/div&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;If you only know quantum operators, superoperators are just another layer of operations on operators. Superoperator notations have been widely used to describe the evolution of open quantum systems where the concept of propagator can be fully characterized.&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn2&quot;&gt;&lt;p&gt;For mixed states, the state of the system cannot be written as a signle pure state, &lt;span class=&quot;math&quot;&gt;\(\ket{\Psi}\)&lt;/span&gt; any more, in general. Instead, a density operator &lt;span class=&quot;math&quot;&gt;\(\hat{\rho}=\sum_i p_i\ketbra{\Psi_i}{\Psi_i}\)&lt;/span&gt; as an ensemble decomposition of pure states, &lt;span class=&quot;math&quot;&gt;\(\ket{\Psi_i}\)&lt;/span&gt;, is used to characterize the system, where &lt;span class=&quot;math&quot;&gt;\(p_i\)&lt;/span&gt; is the probability of being in the &lt;span class=&quot;math&quot;&gt;\(\ket{\Psi_i}\)&lt;/span&gt; state.&lt;a href=&quot;#fnref2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn3&quot;&gt;&lt;p&gt;Also see the &lt;a href=&quot;https://en.wikipedia.org/wiki/Quantum_stochastic_calculus&quot;&gt;Quantum stochastic calculus&lt;/a&gt; page for a quick review created by &lt;a href=&quot;https://www.unm.edu/~jagross/&quot;&gt;Jonathan Gross&lt;/a&gt; for a &lt;a href=&quot;https://iciq.github.io/entangle/WikipediaProject.html&quot;&gt;Quantum Optics wikipedia project&lt;/a&gt;.&lt;a href=&quot;#fnref3&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn4&quot;&gt;&lt;p&gt;We will use this fact in my future notes on deriving quantum dynamic equations symbolically for general scenarios.&lt;a href=&quot;#fnref4&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn5&quot;&gt;&lt;p&gt;A brief summary on the relation between Lindblad equations and CP-map can be found in &lt;a href=&quot;http://blog.jessriedel.com/2014/07/26/lindblad-equation-is-differential-form-of-cp-map/&quot;&gt;Jess Riedel’s blog&lt;/a&gt;.&lt;a href=&quot;#fnref5&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2016/07/23/put-everything-on-a-quantum-circuit-part-i.html</link>
          <pubDate>Sat, 23 Jul 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2016/07/23/put-everything-on-a-quantum-circuit-part-i.html</guid>
        </item>
   
        <item>
          <title>NVidia Linux driver update fixed the openGL problem of Matlab 2016a</title>
          <description>&lt;p&gt;When the Matlab 2016a was released initially, the &lt;a href=&quot;//askubuntu.com/questions/765455/how-to-run-matlab-2016a-with-nvidia-drivers-of-gtx-960-in-ubuntu-16-04&quot;&gt;openGL render was not compatible with some NVidia drivers in Linux&lt;/a&gt;. Recently, I have noticed that the last update of NVidia-367 driver has fixed this problem.&lt;/p&gt;
&lt;p&gt;To install the nvidia-367 driver in Ubuntu 16.04, you need to uninstall the previous nvidia driver first:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt purge nvidia*&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;followed by a reboot of your computer.&lt;/p&gt;
&lt;p&gt;Then install the new driver by adding the ppa and retrieving the package from the repo.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:graphics-drivers/ppa
sudo apt update
sudo apt install NVidia-367&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After a successful reboot, you should see the new driver has been added to your module list.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lsmod | grep nvidia&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Matlab should work smoothly now with a better graphics render. On my laptop, I got the following information in the Matlab command line window:&lt;/p&gt;
&lt;pre class=&quot;sourceCode Matlab&quot;&gt;&lt;code class=&quot;sourceCode matlab&quot;&gt;&amp;gt;&amp;gt; opengl info
                          Version: &lt;span class=&quot;st&quot;&gt;&amp;#39;4.5.0 NVIDIA 367.27&amp;#39;&lt;/span&gt;
                           Vendor: &lt;span class=&quot;st&quot;&gt;&amp;#39;NVIDIA Corporation&amp;#39;&lt;/span&gt;
                         Renderer: &lt;span class=&quot;st&quot;&gt;&amp;#39;Quadro M1000M/PCIe/SSE2&amp;#39;&lt;/span&gt;
                   MaxTextureSize: &lt;span class=&quot;fl&quot;&gt;16384&lt;/span&gt;
                           Visual: &lt;span class=&quot;st&quot;&gt;&amp;#39;Visual 0x70, (RGBA 32 bits (8 8 8 8), Z depth 16 bits…&amp;#39;&lt;/span&gt;
                         Software: &lt;span class=&quot;st&quot;&gt;&amp;#39;false&amp;#39;&lt;/span&gt;
             HardwareSupportLevel: &lt;span class=&quot;st&quot;&gt;&amp;#39;full&amp;#39;&lt;/span&gt;
        SupportsGraphicsSmoothing: &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;
    SupportsDepthPeelTransparency: &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;
       SupportsAlignVertexCenters: &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;
                       Extensions: {&lt;span class=&quot;fl&quot;&gt;330&lt;/span&gt;x1 cell}
               MaxFrameBufferSize: &lt;span class=&quot;fl&quot;&gt;16384&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This was tested working on my Lenovo Thinkpad P50 mobile workstation with Quadro M1000M GPU and Linux kernels 4.5.2 and 4.4.22. Kernel 4.6.0 was not compatible with some latest nvidia drivers before this update, and I haven’t got a chance to try again.&lt;/p&gt;
&lt;p&gt;You may want to remove the graphics driver ppa after this update to prevent new updates of the driver which may screw up your software environment in the future.&lt;/p&gt;
&lt;div class=&quot;references&quot;&gt;

&lt;/div&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2016/06/23/nvidia-driver-update-for-matlab-2016a.html</link>
          <pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2016/06/23/nvidia-driver-update-for-matlab-2016a.html</guid>
        </item>
   
        <item>
          <title>2016 summer study on selected topics in Quantum Optics</title>
          <description>&lt;p&gt;As usual, I will organize/participate a summer study this year. Since there are a lot of things going on this summer and &lt;a href=&quot;http://cquic.unm.edu/deutsch-group/&quot;&gt;Prof. Ivan Deutsch&lt;/a&gt; here in UNM is actually hosting review sessions on Quantum Optics I this summer, I was thinking to have the following focus for my self-organized summer study:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Title: Advanced Topics in Quantum Optics (II)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Yeah, we have tagged part I &lt;a href=&quot;//iciq.github.io/entangle/QuantumOpticsGroup.html&quot;&gt;two years before&lt;/a&gt; already.)&lt;/p&gt;
&lt;center&gt;&lt;div class=&quot;row&quot;&gt;&lt;figure&gt;
&lt;img src=&quot;//media.wiley.com/product_data/coverImage300/73/35274070/3527407073.jpg&quot;  scale=&quot;95%&quot;    align=&quot;center&quot; alt=&quot;optical pumping and laser cooling&quot;   /&gt;
&lt;/figure&gt;&lt;/div&gt;
&lt;/center&gt;
  
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Main topics:
&lt;ul&gt;
&lt;li&gt;Optical pumping&lt;/li&gt;
&lt;li&gt;Laser cooling&lt;/li&gt;
&lt;li&gt;matrix/tensor product state representation of many-body systems (let’s see if time permits)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Time slot: From June 1st to July 29th. Detailed schedule to be updated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Main references:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://info.phys.unm.edu/~ideutsch/Classes/Phys566F15/index.htm&quot;&gt;Quantum Optics I by Prof. Ivan Deutsch&lt;/a&gt; (lecture videos, notes and homeworks are all available in the link).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://info.phys.unm.edu/~ideutsch/Classes/Phys531F11/index.htm&quot;&gt;Atomic Physics course by Prof. Ivan Deutsch&lt;/a&gt; (lecture videos, notes and homeworks are all available in the link).&lt;/li&gt;
&lt;li&gt;A book, if you wish, as shown in the photo above by our friend &lt;a href=&quot;http://cquic.unm.edu/member/yuan.yu.jau/&quot;&gt;Yuan-Yu Jau&lt;/a&gt; and others on Optical Pumping featured with simulation demo codes and detailed analysis.&lt;/li&gt;
&lt;li&gt;A handful of classical papers to be updated here later.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Discussion forum: &lt;a href=&quot;https://disqus.com/home/channel/quantumoptics&quot;&gt;see this channel&lt;/a&gt; I created recently.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The plan is to visit or revisit those lectures and do some homeworks and derivations, and reproduce some known results published in some reference papers. I may do some programming in Julia using our preliminary &lt;a href=&quot;//juliaquantum.github.io&quot;&gt;JuliaQuantum libraries&lt;/a&gt;, which is good to me since I will meet with Nik from Stanford in June to share our experiences on symbolic computing and simulating quantum control related stuffs in Julia, and then meet with our core JuliaQuantum developer Amir and a tensor network guru Jutho from Ghent to discuss some efficient ways to handle quantum objects in Julia. I hope some good ideas can be further transferred to the code base of the JuliaQuantum libraries under construction.&lt;/p&gt;
&lt;p&gt;If you are interested in taking this challenge and fun study opportunity, feel free to contact me or comment below. Thanks!&lt;/p&gt;
&lt;h1 id=&quot;schedule-and-progress&quot;&gt;Schedule and progress&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;[X] June 1st-5th:
&lt;ul&gt;
&lt;li&gt;[X] From Ivan’s QO lectures: Coherence, density matrix, Bloch-sphere, Rabi oscillations. Lecture notes #4-6, P.S. #2-4; Optical Bloch equations, Master equation, Damped two-level atom. Lecture notes #7-8, P.S. #5-6.&lt;/li&gt;
&lt;li&gt;[X] From Yuan-Yu’s book: chapters 1-5 (Alkali atoms, wavefunction, Schrodinger space, density matrix, Liouville space, optical pumping of atoms).&lt;/li&gt;
&lt;li&gt;[X] Get familiar with JuliaQuantum libraries: &lt;a href=&quot;https://github.com/JuliaQuantum/QuBase.jl&quot;&gt;QuBase.jl&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaQuantum/QuDirac.jl&quot;&gt;QuDirac.jl&lt;/a&gt; and &lt;a href=&quot;https://github.com/JuliaQuantum/QuDynamics.jl&quot;&gt;QuDynamics.jl&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[X] June 6th-12th:
&lt;ul&gt;
&lt;li&gt;[X] From Ivan’s QO lectures: Quantization of the field, atoms+quantized field. Lecture notes #11-13, P.S. #7;&lt;/li&gt;
&lt;li&gt;[X] From Ivan’s AP lectures: notes 10-13.&lt;/li&gt;
&lt;li&gt;[X] From Yuan-Yu’s book: chapters 6-9.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[X] Skip June 13th-19th for more research work to be done. Then from June 20th-26th:
&lt;ul&gt;
&lt;li&gt;[X] Wrap up on Yuan-Yu’s book.&lt;/li&gt;
&lt;li&gt;[X] A blog post on some essential points. See &lt;a href=&quot;/en/2016/07/23/put-everything-on-a-quantum-circuit-part-i.html&quot;&gt;this one&lt;/a&gt; and more to come.&lt;/li&gt;
&lt;li&gt;[X] Discuss with Nikolas as our visitor on symbolic calculus and quantum simulations in Julia.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A side note: I have to skip a month for preparing the workshop/conference and JuliaQuantum activities. Writing notes took much more time than I had expected as there were some Jekyll and plugin problems I had to solve on the first time. I will skip the topic on cooling processes for this summer study and will pick up a little bit on matrix product states before July 29th and will write some notes and discuss some important topics with JuliaQuantum members in the coming weeks. So, no further plan for the rest of summer study. Sorry about that. Please continue on if you are willing to learn more.&lt;/p&gt;
&lt;div class=&quot;references&quot;&gt;

&lt;/div&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2016/05/26/2016-summer-study-on-quantum-optics-II.html</link>
          <pubDate>Thu, 26 May 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2016/05/26/2016-summer-study-on-quantum-optics-II.html</guid>
        </item>
   
        <item>
          <title>SQuInT Workshop 2016</title>
          <description>&lt;p&gt;I am going to present our recent work in &lt;a href=&quot;http://physics.unm.edu/SQuInT/2016/index.php&quot;&gt;the 18th SQuInT Workshop&lt;/a&gt; at Albuquerque, NM, USA. Below you can find my poster.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/i2000s/SQuInT2016&quot;&gt;Link to the poster material&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;abstract&quot;&gt;Abstract:&lt;/h2&gt;
&lt;p&gt;While optical fibers have been used for primary quantum communications, atom-fiber and atom-waveguide based quantum interfaces have been proposed as effective elements to implement a broad range of quantum information processing applications. We study the strong coupling between photons and atoms that can be achieved in an optical nanofiber geometry when the interaction is dispersive. While the Purcell enhancement factor for spontaneous emission into the guided mode does not reach the strong-coupling regime for individual atoms, one can obtain high cooperativity for ensembles of a few thousand atoms due to the tight confinement of the guided modes and constructive interference over the entire chain of trapped atoms. We studied the theory of the phase shift and polarization rotation induced on the guided light by the trapped atoms using the dyadic Green’s function method. The Green’s function is related to a full Heisenberg-Langevin treatment of the dispersive response of the quantized field to tensor polarizable atoms. In this talk, I will illustrate how do we apply our formalism to quantum nondemolition (QND) measurement of the atoms via polarimetry. We study shot-noise-limited detection of atom number for atoms in a completely mixed spin state and the squeezing of projection noise for atoms in clock states. Compared with squeezing of atomic ensembles in free space, we capitalize on unique features that arise in the nanofiber geometry including anisotropy of both the intensity and polarization of the guided modes. We use a first principles stochastic master equation to model the squeezing as function of time in the presence of decoherence due to optical pumping. We find a peak metrological squeezing of ~5 dB is achievable with current technology for ~2500 atoms. The theory established can be used to guide the design of nanofiber- or waveguide-based quantum interfaces.&lt;/p&gt;
&lt;h2 id=&quot;note&quot;&gt;Note:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There are some researchers contacted me and my supervisor before the workshop for some chat, and hence the chat time over the poster session may be limited. But if you are interested in my poster, we can talk about it at any break time during the workshop.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since I am also serving for a few other duties recently, this poster was made in a hurry and was not well organized in a normal order. You may want to talk to me or contact me if you find an error or anywhere confusing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More details can be found in our publication: &lt;a href=&quot;https://journals.aps.org/pra/abstract/10.1103/PhysRevA.93.023817&quot;&gt;X. Qi, B. Q. Baragiola, P. S. Jessen, and I. H. Deutsch, Phys. Rev. A 93, 023817 (2016)&lt;/a&gt;. ArXiv online: &lt;a href=&quot;https://arxiv.org/abs/1509.02625&quot;&gt;https://arxiv.org/abs/1509.02625&lt;/a&gt;. The full title is &lt;strong&gt;&lt;em&gt;Dispersive response of atoms trapped near the surface of an optical nanofiber with applications to quantum nondemolition measurement and spin squeezing&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To cite this poster, please use the following &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_object_identifier&quot;&gt;DOI&lt;/a&gt;&lt;/p&gt;
&lt;a href=&quot;https://zenodo.org/badge/latestdoi/75506383&quot;&gt;
&lt;div class=&quot;row&quot;&gt;&lt;figure&gt;
&lt;img src=&quot;https://zenodo.org/badge/75506383.svg&quot;   width=&quot;200px&quot;   align=&quot;center&quot;    /&gt;
&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;&lt;/a&gt; or &lt;a href=&quot;https://doi.org/10.5281/zenodo.192474&quot;&gt;10.5281/zenodo.192474&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for your interest, and hopefully see you in SQuInT!&lt;/p&gt;
&lt;div class=&quot;references&quot;&gt;

&lt;/div&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2016/02/17/SQuInT-workshop-2016.html</link>
          <pubDate>Wed, 17 Feb 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2016/02/17/SQuInT-workshop-2016.html</guid>
        </item>
   
        <item>
          <title>Step 7 - Automate the tests</title>
          <description>&lt;p&gt;Welcome to step 7 in &lt;a href=&quot;/en/2015/05/10/rock_solid_code.html&quot;&gt;your training as a scientific Python code ninja&lt;/a&gt;: &lt;strong&gt;test automation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Tests are extremely useful, as long as you run them. Unfortunately, a common pattern in many projects is this:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Tests are written and run by the person who wrote them.&lt;/li&gt;
&lt;li&gt;Others, and even the test-writer at a future date, forget to run the tests before committing new code. Or they decide not to run the tests because they forget how, or they don’t want to wait for the tests to finish.&lt;/li&gt;
&lt;li&gt;The new code breaks the tests. By the time somebody notices, it’s too much trouble to go back and figure out where things went wrong, much less how to fix them.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;How do you avoid this? You make running the tests dead simple and fully automatic. This step is about making the tests run with a single command; step 8 is about having a machine run them whenever you commit code, without any action on your part.&lt;/p&gt;
&lt;p&gt;As a matter of fact, in &lt;a href=&quot;/en/2015/05/15/write_tests.html&quot;&gt;Step 5&lt;/a&gt; we set things up so that the tests in one file could by run with a single command. But eventually, you will have tests in multiple files. Besides doctests, you may write additional tests. If you need to type 10, or even 3 commands to run them all, there will be a mental barrier and eventually you’ll get lazy.&lt;/p&gt;
&lt;h1 id=&quot;nose&quot;&gt;nose&lt;/h1&gt;
&lt;p&gt;There are a number of test automation tools for Python, but to keep things simple I will focus on the one I know best: &lt;a href=&quot;https://nose.readthedocs.org/en/latest/&quot;&gt;nose&lt;/a&gt;. Nose does one simple thing: it automatically finds all the tests in your project and runs them. How does it know where the tests are? Well, it can easily recognize doctests, and it will also pick up any function whose name contains “test” and that is in file whose name contains “test”.&lt;/p&gt;
&lt;h1 id=&quot;what-to-do&quot;&gt;What to do:&lt;/h1&gt;
&lt;p&gt;As usual, this should only take two minutes.&lt;/p&gt;
&lt;ol start=&quot;0&quot; type=&quot;1&quot;&gt;
&lt;li&gt;In case it isn’t installed already, do &lt;code&gt;pip install nose&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;First, go to your project directory and type &lt;code&gt;nosetests --with-doctest&lt;/code&gt;. The nose executable is named “nosetests” and the option &lt;code&gt;--with-doctest&lt;/code&gt; tells it to also run any doctests it finds. You should get a message saying that some number of tests were run, with an “OK” at the end.&lt;/li&gt;
&lt;li&gt;To see how nosetests becomes really useful, either: (a) add a doctest in another file; or (b) add a file called &lt;code&gt;tests.py&lt;/code&gt; containing at least one function with “test” in the name. The test function should check something and raise an exception if things are wrong. See &lt;a href=&quot;https://github.com/ketch/rock-solid-code-demo/blob/master/tests.py&quot;&gt;this example in my demo project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Now type &lt;code&gt;nosetests --with-doctest&lt;/code&gt; again. You should see that your new tests were also run. To get more detailed output, try &lt;code&gt;nosetests --with-doctest --vs&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s it. Now, if you add more doctests or other tests, you can run them all just by typing &lt;code&gt;nosetests --with-doctest&lt;/code&gt;. That’s the kind of thing you might want to add to your README. Your rule now should be:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Always run the tests before you commit code.&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;note-this-post-was-originally-written-by-david-ketcheson-and-posted-at-httpwww.davidketcheson.info20150529automate_tests.html&quot;&gt;Note: this post was originally written by David Ketcheson and posted at &lt;a href=&quot;http://www.davidketcheson.info/2015/05/29/automate_tests.html&quot;&gt;http://www.davidketcheson.info/2015/05/29/automate_tests.html&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;under the &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/deed.en_US&quot;&gt;Creative Commons Attribution 3.0 Unported License&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;references&quot;&gt;

&lt;/div&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2015/05/29/automate_tests.html</link>
          <pubDate>Fri, 29 May 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2015/05/29/automate_tests.html</guid>
        </item>
   
        <item>
          <title>Step 6 - Keep track of issues</title>
          <description>&lt;p&gt;Welcome to step 6 in &lt;a href=&quot;/en/2015/05/10/rock_solid_code.html&quot;&gt;your training as a scientific Python code ninja&lt;/a&gt;: &lt;strong&gt;issue tracking&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Look at you! You’ve got your nice code with some docstrings and tests, and you’re humming along analyzing data, simulating widgets, and whatnot. In the middle of it all, you realize that your regression analysis function breaks if you feed it more than 57 data points. And wouldn’t it be nice if it made a plot in addition to just printing out the correlation coefficient? And it would all be easier to use if your functions had default values for some of their arguments.&lt;/p&gt;
&lt;p&gt;But you can’t stop to (fix that bug)/(add that feature)/(refactor that function) right now – you’re deep in all that beautiful data! Besides, maybe nobody will ever try to use this script with more than 57 data values. What should you do?&lt;/p&gt;
&lt;h2 id=&quot;raise-an-issue.&quot;&gt;Raise an issue.&lt;/h2&gt;
&lt;p&gt;An issue may be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A bug&lt;/li&gt;
&lt;li&gt;A bit of code that works but needs to be improved&lt;/li&gt;
&lt;li&gt;A potential feature enhancement&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Github – like other code repository services – has a built-in feature for tracking issues. When you raise an issue on your code’s Github repository, awesome things become possible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have a reminder to yourself of that thing that needs to be fixed&lt;/li&gt;
&lt;li&gt;Everyone else who uses your code can be aware of it too&lt;/li&gt;
&lt;li&gt;You and they can have a public discussion of what’s wrong and how to fix it (or what could be improved)&lt;/li&gt;
&lt;li&gt;After it’s fixed/improved, you have a permanent record of the discussion and the improvements, that can be seen by anyone&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With Github’s issue tracker, there’s all kinds of additional goodness: issues are searchable, can reference one another, can reference people, can be tagged/labeled, and more. Check out &lt;a href=&quot;https://guides.github.com/features/issues/&quot;&gt;Github’s 10-minute explanation&lt;/a&gt; to learn all about it.&lt;/p&gt;
&lt;h1 id=&quot;what-to-do&quot;&gt;What to do:&lt;/h1&gt;
&lt;p&gt;As usual, this should only take two minutes.&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Think of at least one or two bugs, potential features, or improvements related to your project code. If you can’t think of any, either you haven’t been using the code much or you’re not thinking very hard.&lt;/li&gt;
&lt;li&gt;Go to your project’s page in Github and click the issues button on the right side: &lt;img src=&quot;/en/assets/img/github-issues-button.png&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Click that big green “New Issue” button. Give the issue a title and an explanation. If it’s a bug, write down the exact sequence of commands that triggers it.&lt;/li&gt;
&lt;li&gt;Click “Submit new issue”.&lt;/li&gt;
&lt;li&gt;(for the future) When you eventually get around to solving the issue, you can mark it as “Closed”. This doesn’t delete it, but it removes it from the list of “Open” issues.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You’re now at a page that lists all the issues for your project (presumably there’s just one so far). If you click on an issue, you find a page where you can write further comments and even have a conversation with other developers. If you’ve never seen such a conversation, take a look at some issues for bigger projects like &lt;a href=&quot;https://github.com/ipython/ipython/issues&quot;&gt;IPython&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-benefits-of-openness&quot;&gt;The benefits of openness&lt;/h2&gt;
&lt;p&gt;It’s nice that you can keep your reminder list there in the issue tracker, but you may be worried about exposing all the shortcomings of your code in public. Don’t be! It’s much better to have them out in the open than to get surprised by them. In fact, the real magic happens when other people start reporting issues. If other people start using your code, you’ll find that somehow they run into a lot more problems than you do. Why? Because there are all kinds of unstated assumptions in your head that silently went into your code – but your users know nothing about them. So they will stress your code in completely different ways and help you find all sorts of wonderful bugs. They may even fix some of them for you – but that’s another subject. Just remember to be grateful – it’s easy to get your feathers ruffled when someone points out a flaw in your code, but in fact they are doing you a service.&lt;/p&gt;
&lt;p&gt;This goes both ways. Your code almost certainly relies on a host of other projects, many of which are on Github or other servers with an issue tracker. Do you use Pandas, numpy, scipy, or scikit-learn? The next time you run into what might be a bug in those packages, be proactive. Of course you should first check Stack Overflow, but if it seems like a bug to you, you can go raise an issue on the project’s issue tracker. That’s right, anybody in the world can raise an issue – you don’t need to be one of the project developers. Just remember to be polite, and &lt;a href=&quot;http://coenjacobs.me/effective-bug-reports-on-github/&quot;&gt;follow a few best practices&lt;/a&gt; when you report an issue.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ketch/rock-solid-code-demo/issues&quot;&gt;Here’s what the issues page for my demo project looks like&lt;/a&gt; after raising a couple of issues. And &lt;a href=&quot;https://github.com/clawpack/pyclaw/issues&quot;&gt;here’s the issue tracker for a larger collaborative project&lt;/a&gt;. In academic research, I find that I open a lot more issues than I close. That’s okay – the issue tracker is not a to-do list that has to be fully completed at some point. It’s just a way of keeping track of useful improvements that could be made.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/en/2015/05/29/automate_tests.html&quot;&gt;Continue to step seven&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;note-this-post-was-originally-written-by-david-ketcheson-and-posted-at-httpwww.davidketcheson.info20150516track_issues.html&quot;&gt;Note: this post was originally written by David Ketcheson and posted at &lt;a href=&quot;http://www.davidketcheson.info/2015/05/16/track_issues.html&quot;&gt;http://www.davidketcheson.info/2015/05/16/track_issues.html&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;under the &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/deed.en_US&quot;&gt;Creative Commons Attribution 3.0 Unported License&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;references&quot;&gt;

&lt;/div&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2015/05/16/track_issues.html</link>
          <pubDate>Sat, 16 May 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2015/05/16/track_issues.html</guid>
        </item>
   
        <item>
          <title>Step 5 - write tests</title>
          <description>&lt;p&gt;This is step 5 in your journey toward &lt;a href=&quot;/en/2015/05/10/rock_solid_code.html&quot;&gt;rock-solid scientific Python code&lt;/a&gt;: &lt;strong&gt;write tests&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Tests? Ugh.&lt;/p&gt;
&lt;p&gt;I hear you. Writing tests is not an inherently fun process. However, the alternative is debugging, staring at code and thinking real hard about what could be wrong, and more debugging. I’ll take writing tests any day of the week.&lt;/p&gt;
&lt;p&gt;You may still not be convinced. Fortunately, I don’t have to convince you, because I’m not going to ask you to write tests in this step. As a matter of fact, I tricked you into writing tests in step 4. Remember those examples you put in your docstring?&lt;/p&gt;
&lt;p&gt;Yeah, I’m sneaky like that.&lt;/p&gt;
&lt;p&gt;What is a test? It’s a bit of code that uses your project code, together with assertions regarding the output. Here’s how you can use the docstring you wrote as a test:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Go to your project directory and identify the file to which you added one or more docstrings in step 4. We’ll refer to that as &lt;code&gt;my_file.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;At the command line (i.e., in a terminal), type &lt;code&gt;python -m doctest -v my_file.py&lt;/code&gt; (but substitute the name of your file).&lt;/li&gt;
&lt;li&gt;Look at the printed output to see if your test(s) passed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What just happened? Doctest is a python module that takes all the examples in your docstrings, runs them, and checks whether the output in the docstring matches the actual output. If any of your doctests failed, you should compare the actual output with your docstring and correct things.&lt;/p&gt;
&lt;p&gt;I always forget how to invoke doctest, so I put the following code at the bottom of all my &lt;code&gt;.py&lt;/code&gt; files:&lt;/p&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;__name__&lt;/span&gt; == &lt;span class=&quot;st&quot;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;:
    &lt;span class=&quot;ch&quot;&gt;import&lt;/span&gt; doctest
    doctest.testmod()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After adding that, I can just do&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python my_file.py -v&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and it will automatically run the doctests. One warning: if you don’t add the &lt;code&gt;-v&lt;/code&gt; flag (for verbose) on the command line, then there will be no printed output at all unless some test fails. And if you put &lt;code&gt;-v&lt;/code&gt; before your filename, you’ll get something totally different.&lt;/p&gt;
&lt;p&gt;Doctests are certainly not all there is to testing in Python, but for me they are a minimal-effort approach that makes my code much more reliable. If you add a docstring with a doctest to each function and module in your code, you’ll spend a lot less time debugging later on. I bet you’ll also find some bugs as you add the doctests.&lt;/p&gt;
&lt;p&gt;From now on, just make it a habit to add a docstring and a doctest whenever you write a new function. Your future self will thank you.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ketch/rock-solid-code-demo/blob/13ab3f8af4e6be813eaee512897948e4c5a178a7/factor.py&quot;&gt;Here’s what my demo repository looks like at this stage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/en/2015/05/16/track_issues.html&quot;&gt;Continue to step six&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;note-this-post-was-originally-written-by-david-ketcheson-and-posted-at-httpwww.davidketcheson.info20150515write_tests.html&quot;&gt;Note: this post was originally written by David Ketcheson and posted at &lt;a href=&quot;http://www.davidketcheson.info/2015/05/15/write_tests.html&quot;&gt;http://www.davidketcheson.info/2015/05/15/write_tests.html&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;under the &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/deed.en_US&quot;&gt;Creative Commons Attribution 3.0 Unported License&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;references&quot;&gt;

&lt;/div&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2015/05/15/write_tests.html</link>
          <pubDate>Fri, 15 May 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2015/05/15/write_tests.html</guid>
        </item>
   
        <item>
          <title>Step 4 - write docstrings</title>
          <description>&lt;p&gt;This is step 4 in your journey toward &lt;a href=&quot;/en/2015/05/10/rock_solid_code.html&quot;&gt;rock-solid scientific Python code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Steps 1-3 were language-agnostic, but now I’m going to assume you’re using Python. The Python language has a built-in feature for documenting functions, classes, and modules; it is the &lt;strong&gt;docstring&lt;/strong&gt;. A docstring for a very simple function looks like this:&lt;/p&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; square(x):
    &lt;span class=&quot;co&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    Takes a number x and returns x*x.&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;    Examples:&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    &amp;gt;&amp;gt;&amp;gt; square(5)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    25&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    &amp;gt;&amp;gt;&amp;gt; square(2)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    4&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; x*x&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The docstring is, of course, the part inside the triple quotes. If you type a function name followed by a “?” at the Python interpreter (or in a Jupyter notebook):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; my_function?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then Python shows you the docstring for the function. If you’ve ever tried to get help on a function that had no docstring, you know the dark feeling of despair that attends such a moment. Don’t let your code be that code. Write docstrings!&lt;/p&gt;
&lt;p&gt;For a somewhat longer docstring, see &lt;a href=&quot;https://github.com/ketch/rock-solid-code-demo/blob/master/factor.py&quot;&gt;my Gaussian elimination example&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What should go in a docstring? Obviously, you should describe the arguments to the function and values returned by the function. But usually the most useful part of a docstring is examples. I’ll repeat that, because it’s important:&lt;/p&gt;
&lt;h2 id=&quot;examples-are-the-most-useful-part-of-a-docstring.&quot;&gt;Examples are the most useful part of a docstring.&lt;/h2&gt;
&lt;p&gt;Why? Often, the docstring written by the person who wrote the code includes a bunch of stuff that mattered when writing the code, but isn’t really important when using the code. Examples show precisely what you need to know to use the code.&lt;/p&gt;
&lt;p&gt;Each example should show the function being called and its arguments, as well as the output. You should format your examples like those above, using “&amp;gt;&amp;gt;&amp;gt;” before the input and putting the output on the next line. This is helpful not only because users are used to the convention, but because as we’ll see later it allows the computer to automatically run your examples and check that they give the expected outputs!&lt;/p&gt;
&lt;p&gt;Here’s what to do:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Open the file with the most important functions in your project code. If you don’t have functions, open the main script file.&lt;/li&gt;
&lt;li&gt;Add a docstring for one or two of the main functions (or at the top of the script). Make sure you include at least one example.&lt;/li&gt;
&lt;li&gt;Open an IPython session or Jupyter notebook. Import your code and then call up the docstring using “?”. Make sure this works correctly.&lt;/li&gt;
&lt;li&gt;Commit and push.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ketch/rock-solid-code-demo/blob/3784b04109b2ca92633a788cc02562898064282c/factor.py&quot;&gt;Here’s what my demo repository looks like at this stage&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;when-should-i-write-docstrings&quot;&gt;When should I write docstrings?&lt;/h1&gt;
&lt;p&gt;That’s easy: when you start writing a new function, before you write the code itself, add the docstring. Make it a habit! Of course, you can come back and refine the docstring as necessary after writing the code.&lt;/p&gt;
&lt;p&gt;Now go to &lt;a href=&quot;/en/2015/05/15/write_tests.html&quot;&gt;step five&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;note-this-post-was-originally-written-by-david-ketcheson-and-posted-at-httpwww.davidketcheson.info20150514write_docstrings.html&quot;&gt;Note: this post was originally written by David Ketcheson and posted at &lt;a href=&quot;http://www.davidketcheson.info/2015/05/14/write_docstrings.html&quot;&gt;http://www.davidketcheson.info/2015/05/14/write_docstrings.html&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;under the &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/deed.en_US&quot;&gt;Creative Commons Attribution 3.0 Unported License&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;references&quot;&gt;

&lt;/div&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2015/05/14/write_docstrings.html</link>
          <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2015/05/14/write_docstrings.html</guid>
        </item>
   
        <item>
          <title>Step 3 - Add a README and a License</title>
          <description>&lt;p&gt;This is step 3 in your journey toward &lt;a href=&quot;/en/2015/05/10/rock_solid_code.html&quot;&gt;rock-solid scientific Python code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So your code is &lt;a href=&quot;/en/2015/05/11/use_version_control.html&quot;&gt;under version control&lt;/a&gt; and it’s &lt;a href=&quot;/en/2015/05/12/code_in_the_open.html&quot;&gt;floating up there in the cloud&lt;/a&gt;. In principle, someone else could use it. But how will they know it’s there? How will they know what it does, and how to install and use it?&lt;/p&gt;
&lt;h1 id=&quot;you-need-a-readme-file.&quot;&gt;You need a README file.&lt;/h1&gt;
&lt;p&gt;A README is minimalist documentation – just what is absolutely necessary for someone to start using your code. Most often, that someone is your future self, who has forgotten things. Here’s what to do:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Go to your project directory and open a new file. Call it README.md. The .md extension stands for Markdown, which is just an embellished format for text files that lets you add text formatting in simple ways that will automatically show up on Github. You can learn more about Markdown &lt;a href=&quot;https://help.github.com/articles/markdown-basics/&quot;&gt;here&lt;/a&gt;, but for the moment just think of it as a text file.&lt;/li&gt;
&lt;li&gt;Write the contents of the README file. You should probably include:
&lt;ul&gt;
&lt;li&gt;a brief description of what your code does;&lt;/li&gt;
&lt;li&gt;instructions for installing your code;&lt;/li&gt;
&lt;li&gt;what other code needs to be installed for it to work;&lt;/li&gt;
&lt;li&gt;one or two examples of how to invoke your code;&lt;/li&gt;
&lt;li&gt;optionally: who wrote the code, how to cite it, and who to contact for help. One good example of a README file is &lt;a href=&quot;https://github.com/github/markup/blob/master/README.md&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Save and close the file.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Add it to your repository with &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Push the file to github with &lt;code&gt;git push&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Go to the page for your project on Github. You should see the contents of your README file displayed automatically right below the directory listing. It should look &lt;a href=&quot;https://github.com/ketch/rock-solid-code-demo&quot;&gt;something like this&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: it’s also possible (and even easier) to add a README directly on Github, by clicking that nice green button:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/en/assets/img/github-readme-button.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Nice work! Now others (or your future self) stand a decent chance of being able to use your code. But they may not want to use it in exactly the same way you do. In fact, there’s a good chance they may want to modify it, or incorporate it into some other code they have. By default, copyright laws don’t allow them to do that. If you want others to be able to use your code for their purposes…&lt;/p&gt;
&lt;h1 id=&quot;you-need-a-license-file.&quot;&gt;You need a License file.&lt;/h1&gt;
&lt;p&gt;This part is fairly painless because, unlike a README, the license you use should NOT generally be customized for your project. It’s much better to choose a standard license, so that other people don’t need to agonize over all the fine print. The most common licenses for open source scientific software are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://choosealicense.com/licenses/bsd-2-clause/&quot;&gt;BSD&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://choosealicense.com/licenses/mit/&quot;&gt;MIT&lt;/a&gt;, and&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://choosealicense.com/licenses/gpl-2.0/&quot;&gt;GPL&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these allow others to use, redistribute, and modify your code. The GPL license imposes one restriction that is absent from the others: other code that uses yours must also be GPL. Some view this as a great way to encourage more free, open-source code. Others view it as an impediment to your code being used. My suggestion is to use a BSD license, but if you want to investigate in more detail, try &lt;a href=&quot;http://choosealicense.com/&quot;&gt;Choose A License&lt;/a&gt; or go read &lt;a href=&quot;http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3406002/&quot;&gt;this paper&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s what to do:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Create a file called LICENSE.txt in your project directory.&lt;/li&gt;
&lt;li&gt;Paste the license text (from one of the links above) into the file, save, and close.&lt;/li&gt;
&lt;li&gt;Commit and push the file to Github.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s it! Other folks can now legally adapt your code for their own purposes.&lt;/p&gt;
&lt;p&gt;Congratulations on making it this far. Now go to &lt;a href=&quot;/en/2015/05/14/write_docstrings.html&quot;&gt;step four&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;extra-credit-contributing.md-and-thanks.md&quot;&gt;Extra credit: Contributing.md and Thanks.md&lt;/h1&gt;
&lt;p&gt;It’s great that other people can now make improvements to your code. It would be even better if they sent those improvements back to you! To encourage that, you should add a Contributing.md file to tell them what your standards for acceptable code are and what the process is for adding code to your repository. Github provides a &lt;a href=&quot;https://raw.githubusercontent.com/contribute-md/contribute-md-template/master/contribute.md&quot;&gt;standard template for such a file&lt;/a&gt;, though for small projects you can provide something much simpler. Some good examples of contributing files are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/puppetlabs/puppet/blob/master/CONTRIBUTING.md&quot;&gt;Puppet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/thoughtbot/factory_girl_rails/blob/master/CONTRIBUTING.md&quot;&gt;Factory_girl_rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If people have contributed to your project, it’s standard to have a file called Thanks.md that lists their names and contributions.&lt;/p&gt;
&lt;h4 id=&quot;note-this-post-was-originally-written-by-david-ketcheson-and-posted-at-httpwww.davidketcheson.info20150513add_a_readme.html&quot;&gt;Note: this post was originally written by David Ketcheson and posted at &lt;a href=&quot;http://www.davidketcheson.info/2015/05/13/add_a_readme.html&quot;&gt;http://www.davidketcheson.info/2015/05/13/add_a_readme.html&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;under the &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/deed.en_US&quot;&gt;Creative Commons Attribution 3.0 Unported License&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;references&quot;&gt;

&lt;/div&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2015/05/13/add_a_readme.html</link>
          <pubDate>Wed, 13 May 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2015/05/13/add_a_readme.html</guid>
        </item>
   
        <item>
          <title>Step 2 - Code in the open</title>
          <description>&lt;p&gt;This is step 2 in your journey toward &lt;a href=&quot;/en/2015/05/10/rock_solid_code.html&quot;&gt;rock-solid scientific Python code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So you have your code under version control. Nice. But it’s sitting there on your computer. How do you share it with somebody else? And if they improve it, how do you incorporate their changes?&lt;/p&gt;
&lt;p&gt;Version control is your first tool in this regard, too. Your second tool is Github (or Bitbucket, Google Code, etc.). Github is a website that will keep a backup copy of your code for free, and will allow others to download it, change it, and send you their changes. If that sounds great, read on. If you’re scared to put your code in the open because somebody might read it, ponder on &lt;a href=&quot;http://www.siam.org/news/news.php?id=2064&quot;&gt;this&lt;/a&gt; and then read on.&lt;/p&gt;
&lt;h2 id=&quot;two-minutes-to-open-code&quot;&gt;Two minutes to open code&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Go to &lt;a href=&quot;http://github.com/&quot;&gt;Github&lt;/a&gt; and create an account.&lt;/li&gt;
&lt;li&gt;Once you’re logged in, click on the “+” in the upper-right part of the screen and select “New repository”.&lt;/li&gt;
&lt;li&gt;Give it the same name as your project, and write a short description.&lt;/li&gt;
&lt;li&gt;Don’t initialize it with a README or license file (we’ll do that in Step #3).&lt;/li&gt;
&lt;li&gt;Preferably, select “public” repository.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Github will take you to a screen with different sets of instructions. Choose that one that says “…or push an existing repository from the command line” and type what is shown there into a terminal (in your project directory):&lt;/p&gt;
&lt;pre class=&quot;sh&quot;&gt;&lt;code&gt;cd /my/project/directory
git remote add origin git@github.com:username/projectname.git
git push -u origin master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tada! You’ve just “pushed” your code to Github where it is made available to all the world! As a bonus, you can sleep soundly knowing that if your office floods and your house burns down tomorrow, your code will still be there waiting for you. The result should look something like &lt;a href=&quot;https://github.com/ketch/rock-solid-code-demo&quot;&gt;my demo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To learn more about using Github, take a few minutes to read the &lt;a href=&quot;http://www.software-carpentry.org/v5/novice/git/02-collab.html&quot;&gt;Software Carpentry lesson&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now &lt;a href=&quot;/en/2015/05/13/add_a_readme.html&quot;&gt;go on to step three&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;note-this-post-was-originally-written-by-david-ketcheson-and-posted-at-httpwww.davidketcheson.info20150512code_in_the_open.html&quot;&gt;Note: this post was originally written by David Ketcheson and posted at &lt;a href=&quot;http://www.davidketcheson.info/2015/05/12/code_in_the_open.html&quot;&gt;http://www.davidketcheson.info/2015/05/12/code_in_the_open.html&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;under the &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/deed.en_US&quot;&gt;Creative Commons Attribution 3.0 Unported License&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;references&quot;&gt;

&lt;/div&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2015/05/12/code_in_the_open.html</link>
          <pubDate>Tue, 12 May 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2015/05/12/code_in_the_open.html</guid>
        </item>
   
        <item>
          <title>Step 1 - Use version control</title>
          <description>&lt;p&gt;Welcome to step 1 in &lt;a href=&quot;/en/2015/05/10/rock_solid_code.html&quot;&gt;your training as a scientific Python code ninja&lt;/a&gt;: version control. This is not going to be an in-depth course, so if you’re already using distributed version control (like Git or Mercurial), feel free to skip ahead to &lt;a href=&quot;/en/2015/05/12/code_in_the_open.html&quot;&gt;step 2&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;life-before-version-control&quot;&gt;&lt;a href=&quot;http://phdcomics.com/comics.php?f=1531&quot;&gt;Life before version control&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Programs change. That script I wrote last week to process my data needs to be adapted to a new file format or to produce a different kind of analysis. So I copy it to a new file and make some changes. I add a few lines and comment out others. The next week, I copy everything to a new directory so I can apply the code to a new project. A couple of months later, I realize that I have a mess of seven different directories, each with a dozen almost-identically-named files, and I am no longer sure which is the latest or what file does what. I spend a lot of time searching through and comparing the various files and directories to find what I need.&lt;/p&gt;
&lt;p&gt;Meanwhile, I email some version of the script to my collaborator, who also copies and modifies it. Each of us makes different improvements to it. I’d like to have one version with all the improvements, but how to extract the right bits from all the copies?&lt;/p&gt;
&lt;p&gt;Later, I find that my current version of the script doesn’t work with some old data that I need to re-analyze in order to revise a paper. Where is the old version of the script that worked with that data? Or does it even exist?&lt;/p&gt;
&lt;h2 id=&quot;version-control&quot;&gt;Version control&lt;/h2&gt;
&lt;p&gt;Version control software can help you solve all of these problems. It keeps a record of the history of your code and shows you the changes you made at each step. You can easily switch between different versions, or merge contributions from different authors.&lt;/p&gt;
&lt;p&gt;There are many version control systems in use. If you haven’t used one before, it’s best to find out what your collaborators use and start with that. If nobody you work with is using version control, I recommend that you use Git. It has become the most widely used version control system for new projects.&lt;/p&gt;
&lt;h2 id=&quot;two-minutes-to-version-control&quot;&gt;Two minutes to version control&lt;/h2&gt;
&lt;p&gt;If you’re on a Mac- or Linux-based system, you probably already have git. To check, just open a terminal and type&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don’t have it, get it here: http://git-scm.com/downloads. Then take a moment to &lt;a href=&quot;https://help.github.com/articles/set-up-git/#setting-up-git&quot;&gt;set up git&lt;/a&gt;. You’ll only have to do that once on a given computer.&lt;/p&gt;
&lt;p&gt;Then do the following (replacing the directory and file names with the directory and files pertaining to your project):&lt;/p&gt;
&lt;pre class=&quot;sh&quot;&gt;&lt;code&gt;cd my/project/
git init
git add project_file1
git add project_file2
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Go ahead and add all the relevant files. When you’re done, tell git to start keeping track of them by doing&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit -m &amp;quot;Starting to keep this project under version control.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it! To get a first idea of what’s going on, try&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get a much better idea, take 15 minutes and go read the &lt;a href=&quot;http://swcarpentry.github.io/git-novice/&quot;&gt;first software carpentry lesson on version control&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can get by for awhile with just the few git commands listed above. Eventually, you will want to go beyond what is described in the Software Carpentry lesson. When you do, it’s worth reading an extended introduction &lt;a href=&quot;http://git-scm.com/book/en/v2&quot;&gt;like this one&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/en/2015/05/12/code_in_the_open.html&quot;&gt;Continue to step two&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;extra-credit-dont-copy-paste&quot;&gt;Extra credit: Don’t copy-paste&lt;/h2&gt;
&lt;p&gt;Version control is really just one tool that will help you with a general principle of code development:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Don’t duplicate.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In practice, this means things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you have two functions that are almost identical, combine them (or the identical parts of them) into one.&lt;/li&gt;
&lt;li&gt;Don’t comment/uncomment lines of code in order to control the behavior of your code. Instead, use “if” statements and function arguments.&lt;/li&gt;
&lt;li&gt;If you need to apply some code to two different projects, don’t copy the file. Put it on your path.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;note-this-post-is-modified-on-top-of-david-ketchesons-post-at-httpwww.davidketcheson.info20150511use_version_control.html&quot;&gt;Note: this post is modified on top of David Ketcheson’s post at &lt;a href=&quot;http://www.davidketcheson.info/2015/05/11/use_version_control.html&quot;&gt;http://www.davidketcheson.info/2015/05/11/use_version_control.html&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;under the &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/deed.en_US&quot;&gt;Creative Commons Attribution 3.0 Unported License&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;references&quot;&gt;

&lt;/div&gt;
</description>
          <link>https://www.qixiaodong.tk/en/2015/05/11/use_version_control.html</link>
          <pubDate>Mon, 11 May 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="true">https://purl.org/qxd/en/2015/05/11/use_version_control.html</guid>
        </item>
   
  </channel>
</rss>
